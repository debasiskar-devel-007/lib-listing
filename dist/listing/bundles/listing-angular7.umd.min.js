!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?t(exports,require("@angular/cdk/collections"),require("ngx-uploader"),require("ngx-cookie-service"),require("rxjs/operators"),require("@angular/common/http"),require("moment"),require("rxjs"),require("@angular/material/snack-bar"),require("@angular/cdk/a11y"),require("@angular/cdk/drag-drop"),require("@angular/cdk/portal"),require("@angular/cdk/scrolling"),require("@angular/cdk/stepper"),require("@angular/cdk/table"),require("@angular/cdk/tree"),require("@angular/material"),require("@angular/platform-browser/animations"),require("@angular/forms"),require("@angular/common"),require("ngx-moment"),require("@angular/router"),require("@angular/core"),require("@angular/platform-browser"),require("ng2-ckeditor"),require("ngx-image-cropper")):"function"==typeof define&&define.amd?define("listing-angular7",["exports","@angular/cdk/collections","ngx-uploader","ngx-cookie-service","rxjs/operators","@angular/common/http","moment","rxjs","@angular/material/snack-bar","@angular/cdk/a11y","@angular/cdk/drag-drop","@angular/cdk/portal","@angular/cdk/scrolling","@angular/cdk/stepper","@angular/cdk/table","@angular/cdk/tree","@angular/material","@angular/platform-browser/animations","@angular/forms","@angular/common","ngx-moment","@angular/router","@angular/core","@angular/platform-browser","ng2-ckeditor","ngx-image-cropper"],t):t(e["listing-angular7"]={},e.ng.cdk.collections,e.ngxUploader,e.ngxCookieService,e.rxjs.operators,e.ng.common.http,e.momentImported,e.rxjs,e.ng.material["snack-bar"],e.ng.cdk.a11y,e.ng.cdk["drag-drop"],e.ng.cdk.portal,e.ng.cdk.scrolling,e.ng.cdk.stepper,e.ng.cdk.table,e.ng.cdk.tree,e.ng.material,e.ng.platformBrowser.animations,e.ng.forms,e.ng.common,e.ngxMoment,e.ng.router,e.ng.core,e.ng.platformBrowser,e.ng2Ckeditor,e.ngxImageCropper)}(this,function(exports,collections,ngxUploader,ngxCookieService,operators,http,momentImported,rxjs,snackBar,a11y,dragDrop,portal,scrolling,stepper,table,tree,material,animations,forms,common,ngxMoment,router,i0,platformBrowser,ng2Ckeditor,ngxImageCropper){"use strict";var ListingService=(d.decorators=[{type:i0.Injectable,args:[{providedIn:"root"}]}],d.ctorParameters=function(){return[]},d.ngInjectableDef=i0.defineInjectable({factory:function(){return new d},token:d,providedIn:"root"}),d);function d(){}var ApiService=(f.prototype.onUploadOutput=function(t,e,n,a){if("allAddedToQueue"===t.type){var o={type:"uploadAll",url:"http://developmentapi.audiodeadline.com:7031/uploads",method:"POST",data:{path:a}};this.uploadInput.emit(o)}else if("addedToQueue"===t.type&&"undefined"!=typeof t.file)""!=t.file.response&&(this.files=[],this.files.push(t.file),console.log("this.files*********"),console.log(this.files),this.lengthis=this.files.length,this.percentageis=this.files[0].progress.data.percentage);else if("uploading"===t.type&&"undefined"!=typeof t.file){var i=this.files.findIndex(function(e){return"undefined"!=typeof t.file&&e.id===t.file.id});this.files[i]=t.file,this.lengthis=this.files.length,null!=this.files[0]&&null!=this.files[0].progress&&(this.percentageis=this.files[0].progress.data.percentage),console.log("this.files=================="),console.log(this.files)}else"removed"===t.type?this.files=this.files.filter(function(e){return e!==t.file}):"dragOver"===t.type?this.dragOver=!0:"dragOut"===t.type?this.dragOver=!1:"drop"===t.type&&(this.dragOver=!1);if(console.log("files"),console.log(this.files),null!=this.files[0]&&null!=this.files[0].progress&&(null==this.progress[e]&&(this.progress[e]=0),this.inprogress=!0,console.log("file upload progressing"),console.log(this.files[0].progress.data.percentage),this.progress[e]=this.files[0].progress.data.percentage,100==this.progress[e]&&(this.progress[e]=null,this.inprogress=null),console.log("this.uploadtype in api service"),console.log(n)),"single"==n&&(null==this.fileservername[e]&&(this.fileservername[e]=[]),this.fileservername[e]=[],null!=this.files[0].response&&this.fileservername[e].push(this.files[0].response)),"multiple"==n&&(console.log("this.files[0].response"),console.log(this.files.length),console.log(this.files),null==this.fileservername[e]&&(this.fileservername[e]=[]),1==this.files.length&&(this.files[0]&&null!=this.files[0].response&&null==this.files[0].response.error_code&&(this.fileservername[e].push(this.files[0].response),this.files=[],this.uploaderror=""),null!=this.files[0]&&null!=this.files[0].response&&null!=this.files[0].response.error_code&&(this.uploaderror="error occured on uploading !!!")),1<this.files.length)){for(var l in console.log("sdfdsf==== in multiple length "),this.files)null!=this.files[l].response&&null==this.files[l].response.error_code&&this.fileservername[e].push(this.files[l].response);this.files=[]}console.log("this.fileservername"),console.log(this.fileservername),console.log(this.uploaderror)},f.prototype.isTokenExpired=function(){},f.prototype.getclientip=function(){return console.log("endpoint"),this._http.get("http://ipinfo.io/?format=json&token=9797c42b93078a").pipe(operators.map(function(e){return e}))},f.prototype.getEndpoint=function(e){var t={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:""})};return console.log("endpoint"),console.log(e),console.log("httpOptions"),console.log(t),console.log(""),this._http.post(""+e.source,{},t).pipe(operators.map(function(e){return e}))},f.prototype.getData=function(e){var t={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:""})};return console.log("endpoint"),console.log(e),console.log("httpOptions"),console.log(t),console.log(""),this._http.post("datalist",e,t).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postData=function(e,t){var n={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:t.token})};return console.log(""),console.log("endpoint"),console.log(e),console.log("httpOptions"),console.log(n),this._http.post(this.getEndpointUrl(e),JSON.stringify(t),n).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postDatawithoutToken=function(e,t){var n={headers:new http.HttpHeaders({"Content-Type":"application/json"})};return console.log(""),console.log("endpoint"),console.log(e),this._http.post(this.getEndpointUrl(e),JSON.stringify(t),n).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postlogin=function(e,t){var n={headers:new http.HttpHeaders({"Content-Type":"application/json"})};return console.log(""),console.log("endpoint"),console.log(e),this._http.post(this.getEndpointUrl(e),JSON.stringify(t),n).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postSearch=function(e,t,n){var a={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:t})};return n.secretkey=this.secretkey,this._http.post(e,n,a).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.postSearch1=function(e,t){return new http.HttpHeaders({"Content-Type":"application/json",Authorization:t.token}),console.log("------ "),console.log("link"),console.log(e),this._http.post(e,t).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.putData=function(e,t,n){var a={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:""})};return console.log(""),console.log("endpoint"),console.log(e),this._http.put(this.getEndpointUrl(e)+"/"+n,JSON.stringify(t),a).pipe(operators.map(function(e){return e}))},f.prototype.deteOneData=function(e,t,n,a){var o,i={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:n})};return(o={source:a,id:t._id}).secretkey=this.secretkey,this._http.post(e,o,i).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.togglestatus=function(e,t,n,a){var o,i={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:n})};return(o={source:a,data:t}).secretkey=this.secretkey,this._http.post(e,o,i).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.deteManyData=function(e,t,n,a){var o,i={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:n})};return(o={source:a,ids:t}).secretkey=this.secretkey,this._http.post(e+"many",o,i).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.togglestatusmany=function(e,t,n,a,o){var i,l={headers:new http.HttpHeaders({"Content-Type":"application/json",Authorization:a})};return(i={source:o,data:{ids:t,val:n}}).secretkey=this.secretkey,this._http.post(e+"many",i,l).pipe(operators.catchError(function(e){return console.log("error caught in service"),console.error(e),rxjs.throwError(e)}),operators.map(function(e){return e}))},f.prototype.getEndpointUrl=function(e){return""+e},f.decorators=[{type:i0.Injectable}],f.ctorParameters=function(){return[{type:http.HttpClient},{type:http.HttpClient},{type:ngxCookieService.CookieService}]},f.propDecorators={uploaderInput:[{type:i0.ViewChild,args:["fileInput1"]}]},f);function f(e,t,n){this._http=e,this._authHttp=t,this.cookieService=n,this.domain_for_fileupload_val="http://developmentapi.audiodeadline.com:7031/uploadsuploads",this.progress=[],this.uploaderror="",this.secretkey="na",this.fileservername=[],this.options={concurrency:10,maxUploads:10},this.files=[],this.uploadInput=new i0.EventEmitter,this.humanizeBytes=ngxUploader.humanizeBytes,this.cookieService.check("secretkey")&&(this.secretkey=this.cookieService.get("secretkey"))}var moment=momentImported,ListingComponent=function(){function ListingComponent(e,t,n,a,o,i,l,r,s,d){var c=this;this._apiService=e,this.dialog=t,this.bottomSheet=n,this.fb=a,this.router=o,this.resolver=i,this.container=l,this._http=r,this.sanitizer=s,this._snackBar=d,this.myControl=new forms.FormControl,this.columns=[],this.autosearchinput=[],this.olddata=[],this.tsearch=[],this.tableflag=0,this.autosearch=[],this.libdataval={},this.limitcondval={},this.result={},this.sortdataval={},this.sh=!1,this.art=!1,this.aud2=!1,this.aud=!1,this.updatetableval=!1,this.loaderrow=null,this.color="primary",this.mode="indeterminate",this.value=50,this.bufferValue=75,this.previewFlug=!1,this.selectsearch=[],this.stateGroups=this.searchListval,this.displayedColumns=[],this.datacolumns=[],this.displayedColumnsheader=[],this.formarray=[],this.dateSearch_condition={},this.selectSearch_condition={},this.autoSearch_condition={},this.textSearch_condition={},this.loading=!1,this.preresult={},this.dataSource=new material.MatTableDataSource,this.router.events.subscribe(function(e){switch(!0){case e instanceof router.NavigationStart:c.loading=!0;break;case e instanceof router.NavigationEnd:case e instanceof router.NavigationCancel:case e instanceof router.NavigationError:c.loading=!1}})}return Object.defineProperty(ListingComponent.prototype,"search_settings",{set:function(e){this.search_settingsval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"click_to_add_ananother_page",{set:function(e){this.click_to_add_ananother_pageval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"limitcond",{set:function(e){this.limitcondval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"date_search_source_count",{set:function(e){this.date_search_source_countval=e,0==this.date_search_source_countval&&(this.limitcondval.pagecount=1)},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"grab_link",{set:function(e){this.grab_linkval=e,console.log(this.grab_linkval)},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"custombutton",{set:function(e){this.custombuttonval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"date_search_source",{set:function(e){this.date_search_sourceval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"sortdata",{set:function(e){this.sortdataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"date_search_endpoint",{set:function(e){this.date_search_endpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"url",{set:function(e){this.urlval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"searchendpoint",{set:function(e){this.searchendpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"pdf_link",{set:function(e){this.pdf_link_val=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"searchList",{set:function(e){this.searchListval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"libdata",{set:function(e){this.libdataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"datasource",{set:function(e){this.datasourceval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"datacollection",{set:function(e){this.datacollectionval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"skip",{set:function(e){this.skipval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"detail_datatype",{set:function(e){this.detail_datatypeval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"detail_skip_array",{set:function(e){this.detail_skip_arrayval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"sourcedata",{set:function(e){this.sourcedataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"modify_header_array",{set:function(e){this.modify_header_arrayval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"deleteendpoint",{set:function(e){this.deleteendpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"updateendpoint",{set:function(e){this.updateendpointval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"apiurl",{set:function(e){this.apiurlval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"updatetable",{set:function(e){this.updatetableval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"jwttoken",{set:function(e){this.jwttokenval=null!=e?e:""},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"statusarr",{set:function(e){this.statusarrval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"emailarray",{set:function(e){this.emailarrayval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"editroute",{set:function(e){this.editrouteval=e},enumerable:!0,configurable:!0}),Object.defineProperty(ListingComponent.prototype,"preview_artistxp",{set:function(e){this.previewFlug=!0},enumerable:!0,configurable:!0}),ListingComponent.prototype.ngOnChanges=function(e){for(var t in e)"updatetable"==t&&null!=e[t].previousValue&&this.allSearch()},ListingComponent.prototype.inputblur=function(e){this.myForm.controls[e].markAsUntouched()},ListingComponent.prototype.ngOnInit=function(){var _this=this;this.stateGroup=this.myControl.valueChanges.pipe(operators.startWith(""),operators.map(function(e){return _this._filter(e)})),this.x=this.datasourceval;var x=this.x,temp=[],keys=x[0];temp=Object.keys(keys);for(var coldef_list=[],header_list=[],i=0;i<temp.length;i++)coldef_list.push(temp[i].replace(/\s/g,"_")),header_list.push(temp[i]);for(var _loop_1=function(i){var ff="row."+coldef_list[i];for(var b in tt={columnDef:""+coldef_list[i],header:""+header_list[i],cell:function(row){return eval(ff)},objlength:header_list.length},this_1.modify_header_arrayval)b==tt.header&&(tt.header=this_1.modify_header_arrayval[b]);-1==this_1.skipval.indexOf(tt.columnDef)&&this_1.columns.push(tt)},this_1=this,tt,i=0;i<coldef_list.length;i++)_loop_1(i);var displayedcols=this.columns.map(function(e){return e.columnDef}),customcols=[];if(null!=this.libdataval&&null!=this.libdataval.tableheaders&&(customcols=this.libdataval.tableheaders),null!=customcols&&0<customcols.length){for(var v in customcols)0==displayedcols.includes(customcols[v])&&this.columns.push({columnDef:customcols[v],header:customcols[v],cell:"NA"});displayedcols=customcols}null!=this.libdataval.hideaction&&0!=this.libdataval.hideaction||displayedcols.push("Actions"),this.displayedColumns=displayedcols,this.displayedColumns.unshift("#"),1!=this.libdataval.hidemultipleselectbutton&&this.displayedColumns.unshift("select");for(var data_list=[],i=0;i<this.x.length;i++)data_list.push(this.createData(x[i]));this.olddata=data_list,this.dataSource=new material.MatTableDataSource(data_list),this.selection=new collections.SelectionModel(!0,[])},ListingComponent.prototype.img_modal_view=function(e){this.dialog.open(ImageView,{panelClass:"custom-modalbox-image-preview",height:"auto",data:{alldata:e}})},ListingComponent.prototype.onSubmit=function(){var e;this.errormg="";this.myForm.value;for(e in this.myForm.controls)this.myForm.controls[e].markAsTouched()},ListingComponent.prototype.dateSearch=function(e){var t,n,a=this,o=this.apiurlval+""+this.datacollectionval,i=this.apiurlval+""+this.datacollectionval+"-count",l={};if(n={},null!=moment(this.end_date).unix()&&null!=moment(this.start_date).unix()){for(var r in this.dateSearch_condition={},this.dateSearch_condition=n,null!=this.end_date&&null!=this.start_date&&(n[e]={$lte:new Date(this.end_date).getTime(),$gte:new Date(this.start_date).getTime()}),null==this.start_date||null!=this.end_date&&0!=this.end_date.length||(n[e]={$gte:new Date(this.start_date).getTime()}),null==this.end_date||null!=this.start_date&&0!=this.start_date.length||(n[e]={$lte:new Date(this.end_date).getTime()}),this.tsearch)l[r]={$regex:this.tsearch[r].toLowerCase()};var s={};for(var d in this.autosearch)for(var c in this.autosearch[d]){var u={};u[d]=this.autosearch[d][c].val.toLowerCase(),null==s.$or&&(s.$or=[]),s.$or.push(u)}var m=Object.assign({},l,this.dateSearch_condition,s,this.selectSearch_condition,this.libdataval.basecondition);t={condition:{limit:this.limitcondval.limit,skip:0},sort:{field:this.sortdataval.field,type:this.sortdataval.type},searchcondition:m},this.date_search_source_countval=0,this.loading=!0,this._apiService.postSearch(o,this.jwttokenval,t).subscribe(function(e){var t;null!=(t=e).results.res&&0<t.results.res.length?(a.dataSource=new material.MatTableDataSource(t.results.res),a._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"New Search of data loaded"}})):a._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"No such search recod found !!"}}),a.loading=!1}),this._apiService.postSearch(i,this.jwttokenval,t).subscribe(function(e){var t;t=e,a.date_search_source_countval=t.count,0==t.count?a.tableflag=1:a.tableflag=0})}else console.log("error")},ListingComponent.prototype.selectSearch=function(e,t){var n;this.apiurlval,this.date_search_endpointval;(n={})[t.field]=e,this.selectSearch_condition={},this.selectSearch_condition=n;var a=Object.assign({},this.textSearch_condition,this.dateSearch_condition,this.autoSearch_condition,this.selectSearch_condition);this.date_search_sourceval},ListingComponent.prototype.paging=function(e){var t=this;if(1==e&&(this.limitcondval.skip=this.limitcondval.pagecount*this.limitcondval.limit,this.limitcondval.pagecount++),-1==e&&this.limitcondval.skip>this.limitcondval.limit&&(this.limitcondval.skip=(this.limitcondval.pagecount-1)*this.limitcondval.limit,this.limitcondval.pagecount--),1<e&&(1==this.limitcondval.pagecount?this.limitcondval.skip=0:this.limitcondval.skip=(this.limitcondval.pagecount-1)*this.limitcondval.limit),!(-1==e&&this.limitcondval.skip<this.limitcondval.limit)){var n={};for(var a in this.tsearch)n[a]={$regex:this.tsearch[a].toLowerCase()};var o=Object.assign({},n,this.dateSearch_condition,this.autosearch,this.selectSearch_condition,this.libdataval.basecondition),i={condition:{limit:this.limitcondval.limit,skip:this.limitcondval.skip},sort:{field:this.sortdataval.field,type:this.sortdataval.type},searchcondition:o},l=this.apiurlval+""+this.datacollectionval;this.loading=!0,this._apiService.postSearch(l,this.jwttokenval,i).subscribe(function(e){t.result=e,null!=t.result.results.res&&0<t.result.results.res.length?(t.dataSource=new material.MatTableDataSource(t.result.results.res),t._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"New range of data loaded"}})):t._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"No Data Found in this range !!"}}),t.loading=!1}),this.selection.clear()}},ListingComponent.prototype.addautosearchdata=function(e){},ListingComponent.prototype.remove=function(e,t,n){null!=this.autosearch[n]&&this.autosearch[n].splice(t,1)},ListingComponent.prototype.autosearchfunction=function(e,t){this.autosearchinput[e]="",null==this.autosearch[e]&&(this.autosearch[e]=[]),this.autosearch[e].push(t)},ListingComponent.prototype.textsearchfunction=function(e){this.apiurlval,this.date_search_endpointval;var t={},n="";null!=this.tsearch&&null!=this.tsearch[e]&&(n=this.tsearch[e].toLowerCase()),null!=this.tsearch[e]&&1<this.tsearch[e].length&&{$or:[this.tsearch[e].toLowerCase(),this.tsearch[e].toUpperCase()]}&&(t[e+"_regex"]=n),this.textSearch_condition={},this.textSearch_condition=t;var a=Object.assign({},this.textSearch_condition,this.dateSearch_condition,this.autoSearch_condition,this.selectSearch_condition);this.date_search_sourceval},ListingComponent.prototype.refreshdata=function(){this.autosearch=[],this.tsearch=[],this.selectsearch=[],this.start_date=null,this.limitcondval.skip=0,this.end_date=null,this.selectSearch_condition={},this.dateSearch_condition={},this.allSearch()},ListingComponent.prototype.refreshalldata=function(e){if(this.dataSource=new material.MatTableDataSource(this.olddata),this.selection=new collections.SelectionModel(!0,[]),null!=e.filteredData&&e.filteredData.length<this.olddata.length)this.dialog.open(Confirmdialog,{panelClass:"custom-modalbox",data:{message:"Refresh successfully!!",isconfirmation:!1}});else this.dialog.open(Confirmdialog,{panelClass:"custom-modalbox",data:{message:" Updated!!",isconfirmation:!1}})},ListingComponent.prototype._filter=function(e){var t=e.toLowerCase();return this.searchListval.filter(function(e){return e.toLowerCase().includes(t)})},ListingComponent.prototype.getstatus=function(e){for(var t in this.statusarrval)if(this.statusarrval[t].val==e)return this.statusarrval[t].name;return"N/A"},ListingComponent.prototype.pdfFlag=function(e){null!=e.shatterblok_agreement_date&&null==e.audiodeadline_agreement_date&&(this.sh=!0,this.aud=!1),null!=e.shatterblok_agreement_date&&null!=e.audiodeadline_agreement_date&&(this.sh=!0,this.aud=!0),null==e.shatterblok_agreement_date&&null==e.audiodeadline_agreement_date&&(this.sh=!1,this.aud=!1)},ListingComponent.prototype.grapurl=function(e){null!=e&&(this.art=!0,this.aud2=!0),null==e&&(this.art=!1,this.aud2=!1)},ListingComponent.prototype.copyText=function(e,t){var n=t+""+e,a=document.createElement("textarea");a.style.position="fixed",a.style.left="0",a.style.top="0",a.style.opacity="0",a.value=n,document.body.appendChild(a),a.focus(),a.select(),document.execCommand("copy"),document.body.removeChild(a)},ListingComponent.prototype.openinternallink=function(e){this.router.navigate([e.route])},ListingComponent.prototype.openinternallinkwithparam=function(e,t){var n=[];for(var a in n.push(e.route),e.param)n.push(t[e.param[a]]);this.router.navigate(n)},ListingComponent.prototype.opencustombuttonactionlocaldata=function(e,t){var n=[];for(var a in null!=e.refreshdata&&1==e.refreshdata&&this.allSearch(),e.datafields){var o=[];if(o.push(e.datafields[a]),"image"!=e.datafields[a]&&"video"!=e.datafields[a]&&(null!=t[e.datafields[a]]&&"object"!=typeof t[e.datafields[a]]&&null!=t[e.datafields[a]]&&t[e.datafields[a]].toString().includes("iframe")?o.push(this.sanitizer.bypassSecurityTrustHtml(t[e.datafields[a]])):o.push(t[e.datafields[a]])),"image"==e.datafields[a]&&o.push("<img mat-card-image src="+t[e.datafields[a]]+" > <br/>"),"video"==e.datafields[a])if(null!=t[e.datafields[a]]&&""!=t[e.datafields[a]]){var i="<iframe width=560 height=315 src=https://www.youtube.com/embed/"+t[e.datafields[a]]+" frameborder=0 allow=accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe> <br/>";i=this.sanitizer.bypassSecurityTrustHtml(i),o.push(i)}else o.push("N/A");n.push(o)}var l=n;if(null!=this.libdataval.detailview_override&&0<this.libdataval.detailview_override.length){var r=[];for(var s in l){for(var d in this.libdataval.detailview_override)this.libdataval.detailview_override[d].key==l[s][0]&&(r[s]=[this.libdataval.detailview_override[d].val,l[s][1],l[s][0]]);null==r[s]&&(r[s]=l[s])}l=r}null!=e.refreshdata&&1==e.refreshdata&&this.allSearch();this.dialog.open(Confirmdialog,{height:"auto",panelClass:"custom-modalbox-apidata",data:{isconfirmation:!1,data:l}})},ListingComponent.prototype.opencustombuttonactionapidata=function(c,e){var u=this;this.loading=!0;var t=this.apiurlval+c.endpoint,n={};if(n[c.param]=e._id,null!=c.otherparam)for(var a in c.otherparam)n[c.otherparam[a]]=e[c.otherparam[a]];this.loaderrow=e._id,this._apiService.postSearch(t,this.jwttokenval,n).subscribe(function(e){var t;if("success"==(t=e).status){var n={};u.loaderrow=null,u.loading=!1,n=null!=t.res[0]?t.res[0]:t.res;var a=[];for(var o in n){var i=[];if(i.push(o),"image"!=o&&"video"!=o&&("object"!=typeof n[o]?i.push(u.sanitizer.bypassSecurityTrustHtml(n[o])):i.push(n[o])),"image"==o&&i.push("<img mat-card-image src="+n[o]+" > <br/>"),"video"==o){var l="<iframe width=560 height=315 src=https://www.youtube.com/embed/"+n[o]+" frameborder=0 allow=accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture allowfullscreen></iframe> <br/>";l=u.sanitizer.bypassSecurityTrustHtml(l),i.push(l)}a.push(i)}if(null!=u.libdataval.detailview_override&&0<u.libdataval.detailview_override.length){var r=[];for(var s in a){for(var d in u.libdataval.detailview_override)u.libdataval.detailview_override[d].key==a[s][0]&&(r[s]=[u.libdataval.detailview_override[d].val,a[s][1],a[s][0]]);null==r[s]&&(r[s]=a[s])}a=r}null!=c.refreshdata&&1==c.refreshdata&&u.allSearch();u.dialog.open(Confirmdialog,{height:"auto",panelClass:"custom-modalbox",data:{isconfirmation:!1,data:a}})}"error"==t.status&&u._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){u._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),u.loading=!1})},ListingComponent.prototype.openextlinkwithparam=function(e,t){var n="",a="";if(a=e.link,null==e.paramtype)for(var o in e.param)n=e.param[o].q+"="+encodeURI(t[e.param[o].key]),0==parseInt(o)&&(a=a+"?"+n),0!=parseInt(o)&&(a=a+"&"+n);if(null!=e.paramtype&&"angular"==e.paramtype)for(var o in e.param)a=a+"/"+encodeURI(t[e.param[o]]);setTimeout(function(){},10),window.open(a,"_blank")},ListingComponent.prototype.clickurl=function(e,t){var n=t+""+e._id+this.pdf_link_val;window.open(n,"_blank")},ListingComponent.prototype.isAllSelected=function(){if(console.log("isAllSelected"),null!=this.selection&&this.selection.select)return console.log("isAllSelected",this.dataSource.data.length,this.selection.selected.length),this.selection.selected.length===this.dataSource.data.length},ListingComponent.prototype.masterToggle=function(){var t=this;this.isAllSelected()?this.selection.clear():this.dataSource.data.forEach(function(e){return t.selection.select(e)})},ListingComponent.prototype.checkboxLabel=function(e){return e?(this.selection.isSelected(e)?"deselect":"select")+" row "+(e.position+1):(this.isAllSelected()?"select":"deselect")+" all"},ListingComponent.prototype.createData=function(t){var n={};return Object.keys(t).forEach(function(e){n[e.replace(/\s/g,"_")]=t[e]}),n},ListingComponent.prototype.applyFilter=function(e){this.dataSource.filter=e.trim().toLowerCase(),this.dataSource.paginator&&this.dataSource.paginator.firstPage()},ListingComponent.prototype.styleCell=function(e,t){return{}},ListingComponent.prototype.fetchvideo=function(e){this.dialog.open(VideoPlayer,{panelClass:"custom-modalbox-videoplayer-preview",height:"auto",data:{previewData:e}})},ListingComponent.prototype.opennotes=function(n){var a=this;this.loading=!0,this.loaderrow=n._id,this._apiService.postSearch(this.apiurlval+this.libdataval.notes.listendpoint,this.jwttokenval,{id:n._id}).subscribe(function(e){var t;t=e,a.loading=!1,a.loaderrow=null;a.dialog.open(Confirmdialog,{height:"auto",panelClass:"custom-modalbox",data:{isconfirmation:!1,notes:!0,apiurl:a.apiurlval,notedata:a.libdataval.notes,rowdata:n,jwttokenval:a.jwttokenval,listdata:t.res}})})},ListingComponent.prototype.viewdata=function(e){var t;t=e;var n=[];for(var a in t)if(t.hasOwnProperty(a)&&("boolean"==typeof t[a]&&(1==t[a]&&(t[a]="Yes"),0==t[a]&&(t[a]="No")),"image"==a&&(t[a+":"]="<img mat-card-image src="+t[a]+"><br/>"),t[a],"object"==typeof t[a])){var o=[];for(var i in t[a])for(var l in this.detail_datatypeval)if(this.detail_datatypeval[l].key==a&&"image"==this.detail_datatypeval[l].value&&o.push("<img mat-card-image src="+t[a][i]+"><br/>"),this.detail_datatypeval[l].key==a&&"image"!=this.detail_datatypeval[l].value&&o.push("<span>"+t[a][i]+"</span><br/>"),this.detail_datatypeval[l].key!=a&&"object"==typeof t[a][i])for(var r in t[a][i])o.push("<span>"+r+" : "+t[a][i][r]+"</span><br/>");t[a+":"]=o}for(var s in t)null!=t[s]&&""!=t[s]&&(n[s]=t[s]);for(var d in this.detail_skip_arrayval)delete n[this.detail_skip_arrayval[d]];var c=Object.entries(n);if(null!=this.libdataval.detailview_override&&0<this.libdataval.detailview_override.length){var u=[];for(var m in c){for(var p in this.libdataval.detailview_override)this.libdataval.detailview_override[p].key==c[m][0]&&(u[m]=[this.libdataval.detailview_override[p].val,c[m][1],c[m][0]]);null==u[m]&&(u[m]=c[m])}c=u}this.dialog.open(Confirmdialog,{height:"auto",panelClass:"custom-modalbox",data:{isconfirmation:!1,data:c}})},ListingComponent.prototype.managestatus=function(a){var o=this;this.bottomSheet.open(BottomSheet,{panelClass:"custom-bottomsheet",data:{items:this.statusarrval}}).afterDismissed().subscribe(function(e){null!=e&&(a.status=e.val,a.id=a._id,o._apiService.togglestatus(o.apiurlval+o.libdataval.updateendpoint,a,o.jwttokenval,o.sourcedataval).subscribe(function(e){var t;if("success"==(t=e).status){for(var n in o.olddata)o.olddata[n]._id==a._id&&(o.olddata[n].status=a.status);o.dataSource=new material.MatTableDataSource(o.olddata),o.selection=new collections.SelectionModel(!0,[]),o.dataSource.paginator=o.paginator,o.dataSource.sort=o.sort;o.dialog.open(Confirmdialog,{panelClass:"custom-modalbox",data:{message:"Status updated successfully!!",isconfirmation:!1}})}"error"==t.status&&o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})}))})},ListingComponent.prototype.custombuttonfunc=function(e){var t=this.custombuttonval.url;for(var n in this.custombuttonval.fields)t=t+"/"+e[this.custombuttonval.fields[n]];t=this.sanitizer.bypassSecurityTrustResourceUrl(t);this.dialog.open(Confirmdialog,{height:"auto",panelClass:"custom-data-modal",data:{isconfirmation:!1,data:[{data:e,customdata:t}]}})},ListingComponent.prototype.managestatusmultiple=function(){var e,a=this,o=[];for(e in this.selection.selected)o.push(this.selection.selected[e]._id);this.bottomSheet.open(BottomSheet,{data:{items:this.statusarrval}}).afterDismissed().subscribe(function(e){if(null!=e){var n=e.val;a._apiService.togglestatusmany(a.apiurlval+a.libdataval.updateendpointmany,o,e.val,a.jwttokenval,a.sourcedataval).subscribe(function(e){if("success"==e.status){for(var t in a.olddata)-1<o.indexOf(a.olddata[t]._id)&&(a.olddata[t].status=n);a.dataSource=new material.MatTableDataSource(a.olddata),a.selection=new collections.SelectionModel(!0,[]),a.dataSource.paginator=a.paginator,a.dataSource.sort=a.sort;a.dialog.open(Confirmdialog,{panelClass:"custom-modalbox",data:{message:"Status updated successfully!!",isconfirmation:!1}})}},function(e){a._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})})}})},ListingComponent.prototype.deletemultiple=function(){var e,o=this,t=this.dialog.open(Confirmdialog,{panelClass:"custom-modalbox",data:{message:"Are you sure you want to delete the selected records?"}}),i=[];for(e in this.selection.selected)i.push(this.selection.selected[e]._id);t.afterClosed().subscribe(function(e){"yes"==e&&o._apiService.deteManyData(o.apiurlval+o.libdataval.deleteendpointmany,i,o.jwttokenval,o.sourcedataval).subscribe(function(e){var t;if("success"==(t=e).status){var n=function(t){o.olddata=o.olddata.filter(function(e){return e._id!=i[t]})};for(var a in i)n(a);o.dataSource=new material.MatTableDataSource(o.olddata),o.selection=new collections.SelectionModel(!0,[]),o.dataSource.paginator=o.paginator,o.dataSource.sort=o.sort,o.allSearch();o.dialog.open(Confirmdialog,{panelClass:"custom-modalbox",data:{message:"Record(s)  deleted successfully !!",isconfirmation:!1}})}"error"==t.status&&o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})})})},ListingComponent.prototype.deletedata=function(n){var a=this;this.dialog.open(Confirmdialog,{panelClass:"custom-modalbox",height:"auto",data:{message:"Are you sure to delete this record ??"}}).afterClosed().subscribe(function(e){"yes"==e&&a._apiService.deteOneData(a.apiurlval+a.deleteendpointval,n,a.jwttokenval,a.sourcedataval).subscribe(function(e){var t;if("success"==(t=e).status){a.olddata=a.olddata.filter(function(e){return e._id!=n._id}),a.dataSource=new material.MatTableDataSource(a.olddata),a.selection=new collections.SelectionModel(!0,[]),a.dataSource.paginator=a.paginator,a.dataSource.sort=a.sort,a.allSearch();a.dialog.open(Confirmdialog,{panelClass:"custom-modalbox",data:{message:"Record  deleted successfully !!",isconfirmation:!1}})}"error"==t.status&&a._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){a._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}})})})},ListingComponent.prototype.editdata=function(e){this.router.navigate([this.editrouteval,e._id])},ListingComponent.prototype.sorttable=function(e,t){this.sortdataval.field=e,this.sortdataval.type=t,this.allSearch()},ListingComponent.prototype.allSearch=function(){var e,n=this,t=this.apiurlval+""+this.datacollectionval,a=this.apiurlval+""+this.datacollectionval+"-count",o={};for(var i in this.tsearch)o[i]={$regex:this.tsearch[i].toLowerCase()};var l={};for(var r in this.autosearch)for(var s in this.autosearch[r]){var d={};d[r]=this.autosearch[r][s].val.toLowerCase(),null==l.$or&&(l.$or=[]),l.$or.push(d)}var c=Object.assign({},o,this.dateSearch_condition,l,this.selectSearch_condition,this.libdataval.basecondition);e={condition:{limit:this.limitcondval.limit,skip:0},sort:{field:this.sortdataval.field,type:this.sortdataval.type},searchcondition:c},this.date_search_source_countval=0,this.loading=!0,this._apiService.postSearch(t,this.jwttokenval,e).subscribe(function(e){var t;null!=(t=e).results.res&&0<t.results.res.length?(n.dataSource=new material.MatTableDataSource(t.results.res),n._snackBar.openFromComponent(SnackbarComponent,{duration:2e3,data:{errormessage:"New Search of data loaded"}})):n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"No such search recod found !!"}}),n.loading=!1}),this._apiService.postSearch(a,this.jwttokenval,e).subscribe(function(e){var t;t=e,n.date_search_source_countval=t.count,0==t.count?n.tableflag=1:n.tableflag=0})},ListingComponent.prototype.gettypeof=function(e){return typeof e},ListingComponent.prototype.artistxpPreview=function(e){var n=this,t={source:"blockchainuser_view",condition:{posts_id_object:e._id},token:this.jwttokenval};this._apiService.postData("http://developmentapi.audiodeadline.com:3090/datalist",t).subscribe(function(e){var t=e;n.dialog.open(Confirmdialog,{panelClass:"custom-modalbox-artistxp-preview",height:"auto",data:{preview:!0,previewData:t}})})},ListingComponent.decorators=[{type:i0.Component,args:[{selector:"lib-listing",template:'<div class="container">\n    <mat-card>\n        <mat-toolbar-row class="searchbar">\n            <ng-container class="inputfilterForloop"\n                *ngIf="search_settingsval !=null && search_settingsval.textsearch != null ">\n                <ng-container *ngFor="let item of search_settingsval.textsearch">\n                    <mat-form-field class="searchdiv pad-gap">\n\n                        <input class="filterForText" matInput (change)="textsearchfunction(item.field)"\n                            (keyup)="textsearchfunction(item.field)" [(ngModel)]=\'tsearch[item.field]\'\n                            placeholder="{{item.label}}">\n                        <span class="filterForTexticon" matPrefix><i class="material-icons searchicon">\n                                search\n                            </i> &nbsp;</span>\n                    </mat-form-field>\n                </ng-container>\n\n            </ng-container>\n\n            <ng-container class="inputfilterForAuto"\n                *ngIf="search_settingsval !=null && search_settingsval.search != null ">\n                <mat-form-field class="filterForAuto searchdiv" *ngFor="let item of search_settingsval.search">\n\n\n                    <mat-chip-list #chipList aria-label="Fruit selection">\n                        <mat-chip *ngFor="let v of autosearch[item.field]; let i=index;" [selectable]="true"\n                            [removable]="true" (removed)="remove(v,i,item.field)">\n                            {{v.name}}\n                            <mat-icon matChipRemove>cancel</mat-icon>\n                        </mat-chip>\n                        <input placeholder="{{item.label}}" #fruitInput [matAutocomplete]="auto"\n                            [matChipInputFor]="chipList" [(ngModel)]="autosearchinput[item.field]">\n                    </mat-chip-list>\n\n                    \x3c!--[matChipInputSeparatorKeyCodes]="[ENTER, COMMA]"--\x3e\n                    \x3c!--(matChipInputTokenEnd)="addautosearchdata($event)"--\x3e\n\n\n                    \x3c!--<input class="filterForAutoInput"  type="text" placeholder="{{item.label}}" matInput [(ngModel)]="autosearch[item.field]" [matAutocomplete]="auto">--\x3e\n                    <mat-autocomplete #auto="matAutocomplete">\n                        \x3c!--<mat-option *ngFor="let option of item.values | async" [value]="option[item.field]" (click)="autosearchfunction(item.field)">\n                            {{option[item.field]}}\n                        </mat-option>--\x3e\n\n                        <mat-option *ngFor="let statusval of item.values" [value]="statusval.val"\n                            (click)="autosearchfunction(item.field,statusval)">\n                            {{statusval.name}}\n                        </mat-option>\n                    </mat-autocomplete>\n                </mat-form-field>\n            </ng-container>\n\n\n\n            \x3c!--      <span *ngIf="search_settingsval !=null && search_settingsval != null ">\n\n      <mat-form-field *ngFor="let item of search_settingsval.search">\n        <mat-label>{{item.label}}</mat-label>\n        <mat-select>\n          <mat-option *ngFor="let status of preresult" [value]="status" (click)="autosearchfunction(status.email)">\n            {{status.email}}\n          </mat-option>\n        </mat-select>\n      </mat-form-field>\n\n      </span>--\x3e\n            \x3c!--  <ng-container  *ngIf="search_settingsval !=null && search_settingsval.textsearch != null ">\n&lt;!&ndash;        <span *ngFor="let status of this.search_settingsval.textsearch">&ndash;&gt;\n&lt;!&ndash;        <mat-form-field *ngFor="let statusval of status.value">&ndash;&gt;\n        <mat-form-field *ngFor="let status of this.search_settingsval.textsearch">\n              <input matInput (keyup)="applyFilter1($event.target.value, status)" placeholder="{{status.label}}">\n        </mat-form-field>\n&lt;!&ndash;              </span>&ndash;&gt;\n      </ng-container>--\x3e\n\n\n            <ng-container class="filterForTexticon"\n                *ngIf="search_settingsval !=null && search_settingsval.selectsearch != null ">\n                <mat-form-field class="searchdiv" *ngFor="let status of this.search_settingsval.selectsearch">\n                    <mat-label>{{status.label}}</mat-label>\n                    <mat-select [(ngModel)]="selectsearch[status.field]">\n                        <mat-option *ngFor="let statusval of status.values" [value]="statusval"\n                            (click)="selectSearch(statusval.val, status)">\n                            {{statusval.name}}\n                        </mat-option>\n                    </mat-select>\n                </mat-form-field>\n            </ng-container>\n\n\n            <ng-container\n                *ngIf="date_search_endpointval !=null && date_search_sourceval != null && search_settingsval.datesearch != null ">\n                <ng-container class="filterFordatesearch" *ngFor="let status of this.search_settingsval.datesearch">\n                    <mat-form-field class="filterFordatesearchformfield searchdiv">\n                        <input class="filterFordatesearchinput" matInput [matDatepicker]="picker" autocomplete="off"\n                            placeholder="{{status.startdatelabel}}" [(ngModel)]="start_date">\n                        <mat-datepicker-toggle matSuffix [for]="picker"></mat-datepicker-toggle>\n                        <mat-datepicker #picker></mat-datepicker>\n                    </mat-form-field>\n                    <mat-form-field class="filterFordatesearchend">\n                        <input class="filterFordatesearchinput" matInput [matDatepicker]="picker1" autocomplete="off"\n                            placeholder="{{status.enddatelabel}}" [(ngModel)]="end_date">\n                        <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>\n                        <mat-datepicker #picker1></mat-datepicker>\n                    </mat-form-field>\n\n\n\n                    <span class="search_class">\n                    <button mat-raised-button color="primary" class="add_button"\n                        (click)="dateSearch(status.field)">{{status.submit}}</button>\n                     </span>\n\n\n\n                </ng-container>\n            </ng-container>\n\n\n            \x3c!-- use for refresh all data --\x3e\n            <span class="search_class">\n                <ng-container class="refresh">\n                    <i (click)="refreshdata()" class="material-icons cursor">\n                        autorenew\n                    </i>\n                </ng-container>\n\n                <ng-container class="refresh"\n                    *ngIf="date_search_endpointval ==null || date_search_sourceval == null || search_settingsval.datesearch == null ">\n                    <button mat-raised-button color="primary" class="add_button" (click)="allSearch()">Search</button>\n                </ng-container>\n\n            </span>\n\n\n\n            <span *ngIf="click_to_add_ananother_pageval !=null">\n                <button mat-raised-button color="primary" class="add_button"\n                    [routerLink]="click_to_add_ananother_pageval">Add</button>\n            </span>\n        </mat-toolbar-row>\n\n\n\n        <ng-container\n            *ngIf="selection.selected !=null && selection.selected.length!=null && selection.selected.length>0">\n            <span class="multipledeleteandupdatebuttan">\n\n                <button *ngIf="libdataval.hidedeletemany==null || libdataval.hidedeletemany==false" mat-raised-button (click)="deletemultiple()"> Delete </button>\n                <button *ngIf="libdataval.hideupdatemany==null || libdataval.hideupdatemany==false"  mat-raised-button (click)="managestatusmultiple()"> Update Status </button>\n\n            </span>\n        </ng-container>\n\n        <section *ngIf="loading == true" class="example-section">\n            <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value"\n                [bufferValue]="bufferValue">\n            </mat-progress-bar>\n            <br />\n            <br />\n        </section>\n\n        <ng-container *ngIf="tableflag==0">\n            <section class="lib-pager-class">\n                <mat-label>\n                    Showing\n                    {{(limitcondval.pagecount-1)*limitcondval.limit}}\n                    To\n\n                    <ng-container *ngIf="date_search_source_countval > ((limitcondval.pagecount)*limitcondval.limit)">\n                        {{(limitcondval.pagecount)*limitcondval.limit}}\n                    </ng-container>\n                    <ng-container\n                        *ngIf="date_search_source_countval!=0 && date_search_source_countval <= ((limitcondval.pagecount)*limitcondval.limit)">\n                        {{date_search_source_countval}}\n                    </ng-container>\n\n\n\n                    of\n                    <span *ngIf="date_search_source_countval!=0 "> {{date_search_source_countval}} </span>\n                    <span *ngIf="date_search_source_countval==0 "> Many </span>\n\n                </mat-label>\n                <span class="=pageformfield">\n                    <mat-form-field>\n                        <mat-label>Page Size</mat-label>\n                        <input matInput [(ngModel)]="limitcondval.limit" type="number" (keyup)="paging(10)">\n                    </mat-form-field>\n\n                    <mat-form-field>\n                        <mat-label>Page No</mat-label>\n                        <input matInput [(ngModel)]="limitcondval.pagecount" type="number" (keyup)="paging(10)">\n                    </mat-form-field>\n                </span>\n                <span>\n\n\n                    <span class="material-icons cursor" (click)="paging(-1)">\n                        skip_previous\n                    </span>\n\n                    <span class="material-icons cursor" (click)="paging(1)">\n                        skip_next\n                    </span>\n                </span>\n            </section>\n\n\n        </ng-container>\n\n        <div class="tablewrapper" *ngIf="tableflag==0">\n\n            <table mat-table [dataSource]="dataSource" class="mat-elevation-z8">\n\n                <ng-container matColumnDef="select">\n                    <th mat-header-cell *matHeaderCellDef>\n                        <mat-checkbox (change)="$event ? masterToggle() : null"\n                            [checked]="selection.hasValue() && isAllSelected()"\n                            [indeterminate]="selection.hasValue() && !isAllSelected()">\n                        </mat-checkbox>\n                    </th>\n                    <td mat-cell *matCellDef="let row" data-label="select">\n                        <mat-checkbox (click)="$event.stopPropagation()"\n                            (change)="$event ? selection.toggle(row) : null" [checked]="selection.isSelected(row)">\n                        </mat-checkbox>\n                    </td>\n                </ng-container>\n                <ng-container matColumnDef="#">\n                    <th mat-header-cell *matHeaderCellDef>\n                        #\n                    </th>\n                    <td mat-cell *matCellDef="let element; let i = index">{{limitcondval.skip+(i+1)}}</td>\n                </ng-container>\n\n                <ng-container *ngFor="let column of columns" [matColumnDef]="column.columnDef">\n                    <th mat-header-cell *matHeaderCellDef class="th-header-center">\n                        <span>\n                            {{column.header}}\n                            <span *ngIf="column.columnDef==sortdataval.field && sortdataval.type==\'desc\'"\n                                class="material-icons cursor float-right" (click)="sorttable(column.columnDef,\'asc\')">\n                                arrow_downward\n                            </span>\n                            <span class="material-icons cursor float-right"\n                                *ngIf="column.columnDef==sortdataval.field && sortdataval.type==\'asc\'"\n                                (click)="sorttable(column.columnDef,\'desc\')">arrow_upward\n                            </span>\n\n                            <span class="material-icons cursor"\n                                *ngIf="sortdataval!=null && sortdataval.options !=null && sortdataval.options.indexOf(column.columnDef) >-1  && column.columnDef!=sortdataval.field"\n                                (click)="sorttable(column.columnDef,\'desc\')">\n                                unfold_more\n                            </span>\n\n                        </span>\n\n                    </th>\n                    <td mat-cell *matCellDef="let row" [ngStyle]="styleCell(column,row)" data-title="{{column.header}}"\n                        class="td-cell-center">\n\n                        <span *ngIf="column.columnDef==\'status\' ">{{ getstatus([column.cell(row)]) }}\n                            {{pdfFlag(row)}}</span>\n                        <span\n                            *ngIf="column.columnDef!=\'status\' &&  column.columnDef!=\'image\' && column.columnDef!=\'video\' ">\n                            <ng-container\n                                *ngIf="column!=null && row[column.columnDef]!=null && !column.columnDef.includes(\'date\') && !column.columnDef.includes(\'datetime\')">\n                                <span [innerHTML]="row[column.columnDef]"></span>\n                            </ng-container>\n                            <ng-container\n                                *ngIf="column!=null && row[column.columnDef]!=null && column.columnDef.includes(\'date\') && !column.columnDef.includes(\'datetime\')">\n                                {{row[column.columnDef] | date}}\n                            </ng-container>\n                            <ng-container\n                                *ngIf="column!=null && row[column.columnDef]!=null && column.columnDef.includes(\'date\') && column.columnDef.includes(\'datetime\')">\n                                {{row[column.columnDef] | date:\'medium\'}}\n                            </ng-container>\n                            <ng-container *ngIf="column!=null && row[column.columnDef]==null">\n                                NA\n                            </ng-container>\n\n                        </span>\n                        \x3c!-- for image view  --\x3e\n                        <span\n                            *ngIf="column.columnDef==\'image\' && row[column.columnDef] !=null && row[column.columnDef] !=\'\' "\n                            (click)="img_modal_view(row[column.columnDef])"> <span class="module_imgblock">\n                                <img src="{{row[column.columnDef]}}" alt="{{row[column.columnDef]}}">\n                            </span></span>\n                        \x3c!-- for video view --\x3e\n                        <span\n                            *ngIf="column.columnDef==\'video\' && row[column.columnDef] !=null && row[column.columnDef] !=\'\' "><span\n                                class="module_videoblock" (click)="fetchvideo(row)">\n                                <img src="https://img.youtube.com/vi/{{row[column.columnDef]}}/sddefault.jpg"\n                                    alt="{{row[column.columnDef]}}" (click)="fetchvideo(row)"></span>\n                        </span>\n\n                        <span\n                            *ngIf="column.columnDef==\'grab_url && grab_linkval!=null && grab_linkval[0]!=null\' ">{{grapurl(row[this.grab_linkval[0].field_name])}}</span>\n\n\n                        \x3c!--          <span *ngIf="sh==true">--\x3e\n                        <span *ngIf="column.columnDef==\'contractssigned\' && sh==true && urlval !=null" class="cursor">\n                            <i title="{{urlval[0].label}}" (click)="clickurl(row,urlval[0].url)"\n                                class="material-icons">cloud_download</i>\n                        </span>\n                        \x3c!--          </span>--\x3e\n                        \x3c!--          <span *ngIf="aud==true">--\x3e\n                        <span *ngIf="column.columnDef==\'contractssigned\' && aud==true  && urlval !=null">\n                            <i title="{{urlval[1].label}}" (click)="clickurl(row,urlval[1].url)"\n                                class="material-icons">cloud_download</i>\n                        </span>\n\n\n                        \x3c!--// for grap url//--\x3e\n\n                        <span *ngIf=" grab_linkval!=null && column.columnDef==[grab_linkval.colom_name[0].col_name]"\n                            class="cursor">\n                            <ng-container *ngFor="let item of grab_linkval.field">\n                                \x3c!-- <p>{{item | json}}</p> --\x3e\n                                <button mat-button\n                                    (click)="copyText(row[grab_linkval.colom_name[0].field_name],item.url)">{{item.label}}</button>\n                            </ng-container>\n                        </span>\n\n                        \x3c!-- <span\n                            *ngIf=" grab_linkval!=null && grab_linkval[0]!=null && column.columnDef==[grab_linkval[0].col_name]"\n                            class="cursor">\n                            <button mat-button\n                                (click)="copyText(row[grab_linkval[0].field_name],grab_linkval[1].url)">{{grab_linkval[1].label}}</button>\n                        </span>\n                        <span\n                            *ngIf="grab_linkval!=null && grab_linkval[0]!=null &&column.columnDef== [grab_linkval[0].col_name]">\n                            <button mat-button\n                                (click)="copyText(row[grab_linkval[0].field_name],grab_linkval[2].url)">{{grab_linkval[2].label}}</button>\n                        </span> --\x3e\n\n                        \x3c!--          //grap url end//--\x3e\n\n\n                        \x3c!--          </span>--\x3e\n                        \x3c!-- <span *ngIf="column.columnDef==\'contractssigned\' ">\n            <span *ngFor="let item of urlval" class="cursor">\n            <i title="{{item.label}}" (click)="clickurl(row,item.url)" class="material-icons">cloud_download</i>\n          </span>\n          </span>--\x3e\n                    </td>\n                </ng-container>\n\n\n\n                <ng-container matColumnDef="Actions"\n                    *ngIf="libdataval.hideaction==null || libdataval.hideaction==false">\n                    <th mat-header-cell *matHeaderCellDef class="th-header-center">Actions</th>\n                    <td (click)="$event.stopPropagation()" mat-cell *matCellDef="let row" data-label="Actions"\n                        class="td-cell-center">\n                        \x3c!-- loader --\x3e\n                        <section class="example-section">\n                            <mat-progress-bar *ngIf="loaderrow!=null && loaderrow==row._id " class="example-margin"\n                                [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n                            </mat-progress-bar>\n                        </section>\n                        \x3c!-- note block --\x3e\n                        <ng-container *ngIf="libdataval.notes!=null">\n                            <button mat-raised-button color="primary"\n                                (click)="opennotes(row)">{{libdataval.notes.label}}({{row.notescount}})</button>\n                        </ng-container>\n                        \x3c!--custom buttions block --\x3e\n                        <ng-container\n                            *ngIf="libdataval !=null && libdataval.custombuttons !=null && libdataval.custombuttons.length >0 ">\n                            <ng-container *ngFor="let custombutton of libdataval.custombuttons; let cb=index">\n                                <section class="custombutton{{cb}}">\n                                    <ng-container *ngIf="custombutton.type==\'externallink\'">\n                                        <ng-container\n                                            *ngIf="custombutton.param==null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n                                            <a target="_blank" href="{{custombutton.link}}">\n                                                <button mat-raised-button\n                                                    color="primary">{{custombutton.label}}</button>\n                                            </a>\n                                        </ng-container>\n\n                                        <ng-container\n                                            *ngIf="custombutton.param!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n\n                                            <button mat-raised-button color="primary"\n                                                (click)="openextlinkwithparam(custombutton,row)">{{custombutton.label}}</button>\n\n                                        </ng-container>\n\n                                    </ng-container>\n                                    <ng-container *ngIf="custombutton.type==\'internallink\'">\n                                        <ng-container\n                                            *ngIf="custombutton.toggle == null && custombutton.param==null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n                                            <button mat-raised-button color="primary"\n                                                (click)="openinternallink(custombutton)">{{custombutton.label}}</button>\n                                        </ng-container>\n                                        <ng-container\n                                            *ngIf="custombutton.toggle != null && custombutton.toggle == \'delete\' && custombutton.toggle!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n                                            <button mat-raised-button color="primary"\n                                                (click)="deletedata(row)">{{custombutton.label}}</button>\n                                        </ng-container>\n\n                                        <ng-container\n                                            *ngIf="custombutton.param!=null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n\n                                            <button mat-raised-button color="primary"\n                                                (click)="openinternallinkwithparam(custombutton,row)">{{custombutton.label}}</button>\n\n                                        </ng-container>\n\n                                    </ng-container>\n                                    <ng-container *ngIf="custombutton.type==\'action\'">\n                                        <ng-container\n                                            *ngIf="custombutton.datatype==\'local\' && custombutton != null && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n                                            <button mat-raised-button color="primary"\n                                                (click)="opencustombuttonactionlocaldata(custombutton,row)">{{custombutton.label}}</button>\n                                        </ng-container>\n                                        <ng-container\n                                            *ngIf="custombutton.datatype==\'api\' && (custombutton.cond==null || row[custombutton.cond]==custombutton.condval )">\n                                            <button mat-raised-button color="primary"\n                                                (click)="opencustombuttonactionapidata(custombutton,row)">{{custombutton.label}}</button>\n                                        </ng-container>\n\n                                    </ng-container>\n                                </section>\n\n                            </ng-container>\n                        </ng-container>\n                        <span *ngIf="selection.selected.length==null || selection.selected.length==0">\n                            <span *ngIf="libdataval.hideeditbutton==null || libdataval.hideeditbutton==false"\n                                class="cursor" (click)="editdata(row)">\n                                <i class="material-icons">\n                                    edit\n                                </i>\n                            </span>\n\n                            \x3c!--For modern browsers--\x3e\n                            <span *ngIf="libdataval.hidedeletebutton==null || libdataval.hidedeletebutton==false"\n                                class="cursor" (click)="deletedata(row)">\n                                <i class="material-icons">\n                                    delete_outline\n                                </i>\n                            </span>\n\n                            \x3c!--For modern browsers--\x3e\n                            <span *ngIf="libdataval.hideviewbutton==null || libdataval.hideviewbutton==false"\n                                class="cursor" (click)="viewdata(row)">\n                                <i class="material-icons">\n                                    remove_red_eye\n                                </i>\n                            </span>\n\n                            \x3c!--For modern browsers--\x3e\n                            <span class="cursor"\n                                *ngIf="libdataval.hidestatustogglebutton==null || libdataval.hidestatustogglebutton==false"\n                                (click)="managestatus(row)">\n                                <i class="material-icons">\n                                    toggle_off\n                                </i>\n                            </span>\n                            <span *ngIf="custombuttonval!=null" class="cursor treeclass"\n                                (click)="custombuttonfunc(row)">\n                                <i class="material-icons treeclass">\n                                    toggle_off\n                                </i>\n                            </span>\n\n                            \x3c!-- artistxp preview start --\x3e\n                            <span *ngIf="previewFlug==true" class="cursor treeclass" (click)="artistxpPreview(row)">\n                                <i class="material-icons">perm_media</i>\n                            </span>\n                            \x3c!-- artistxp preview end --\x3e\n\n                        </span>\n\n                    </td>\n                </ng-container>\n\n\n\n\n\n\n                <tr mat-header-row *matHeaderRowDef="displayedColumns"></tr>\n                <tr mat-row *matRowDef="let row; columns: displayedColumns;"></tr>\n\n            </table>\n\n        </div>\n\n        \x3c!--for pagination --\x3e\n\n        <mat-card *ngIf="tableflag!=0">No Records Exists !!!</mat-card>\n        <ng-container *ngIf="tableflag==0">\n            <section class="lib-pager-class">\n                <mat-label>\n                    Showing\n                    {{(limitcondval.pagecount-1)*limitcondval.limit}}\n                    To\n\n                    <ng-container *ngIf="date_search_source_countval > ((limitcondval.pagecount)*limitcondval.limit)">\n                        {{(limitcondval.pagecount)*limitcondval.limit}}\n                    </ng-container>\n                    <ng-container\n                        *ngIf="date_search_source_countval!=0 && date_search_source_countval <= ((limitcondval.pagecount)*limitcondval.limit)">\n                        {{date_search_source_countval}}\n                    </ng-container>\n\n\n\n                    of\n                    <span *ngIf="date_search_source_countval!=0 "> {{date_search_source_countval}} </span>\n                    <span *ngIf="date_search_source_countval==0 "> Many </span>\n\n                </mat-label>\n                <span class="=pageformfield">\n                    <mat-form-field>\n                        <mat-label>Page Size</mat-label>\n                        <input matInput [(ngModel)]="limitcondval.limit" type="number" (keyup)="paging(10)">\n                    </mat-form-field>\n\n                    <mat-form-field>\n                        <mat-label>Page No</mat-label>\n                        <input matInput [(ngModel)]="limitcondval.pagecount" type="number" (keyup)="paging(10)">\n                    </mat-form-field>\n                </span>\n                <span>\n\n\n                    <span class="material-icons cursor" (click)="paging(-1)">\n                        skip_previous\n                    </span>\n\n                    <span class="material-icons cursor" (click)="paging(1)">\n                        skip_next\n                    </span>\n                </span>\n            </section>\n\n\n        </ng-container>\n        <section *ngIf="loading == true" class="example-section">\n            <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value"\n                [bufferValue]="bufferValue">\n            </mat-progress-bar>\n            <br />\n            <br />\n        </section>\n\n\n\n        \x3c!-- <mat-paginator class="paginator" [pageSizeOptions]="[5,10, 20, 50,100]" showFirstLastButtons></mat-paginator>--\x3e\n        \x3c!--<mat-spinner *ngIf="loading == true" ></mat-spinner>--\x3e\n\n\n\n        \x3c!-- <form [formGroup]="stateForm">\n      <mat-form-field>\n        <input type="text" matInput placeholder="States Group" formControlName="stateGroup" required [matAutocomplete]="autoGroup">\n        <mat-autocomplete #autoGroup="matAutocomplete">\n          <mat-optgroup *ngFor="let group of stateGroupOptions | async" [label]="group.letter">\n            <mat-option *ngFor="let name of group.names" [value]="name">\n              {{name}}\n            </mat-option>\n          </mat-optgroup>\n        </mat-autocomplete>\n      </mat-form-field>\n    </form>--\x3e\n\n        \x3c!--<form class="example-form">\n      <mat-form-field class="example-full-width">\n        <input type="text" placeholder="Select state" aria-label="Number" matInput [formControl]="myControl" [matAutocomplete]="auto">\n        <mat-autocomplete #auto="matAutocomplete">\n          <mat-option *ngFor="let option of stateGroup | async" [value]="option">\n            {{option}}\n          </mat-option>\n        </mat-autocomplete>\n      </mat-form-field>\n    </form>\n--\x3e\n\n    </mat-card>\n\n    \x3c!--\n  <mat-card>\n\n    <div class="example-container">\n\n\n      <mat-card-content >\n        <mat-form-field class="form-group">\n            <input (blur)="inputblur(\'email\')" matInput placeholder="email" type="email" [formControl]="myForm.controls[\'email\']" >\n            <mat-error  *ngIf="!myForm.controls[\'email\'].valid && myForm.controls[\'email\'].touched && issubmit==1">email field can not be blank</mat-error>\n        </mat-form-field>\n\n        <mat-form-field class="form-group">\n            <input (blur)="inputblur(\'password\')" matInput placeholder="Password" type="password" [formControl]="myForm.controls[\'password\']" >\n            <mat-error  *ngIf="!myForm.controls[\'password\'].valid && myForm.controls[\'password\'].touched && issubmit==1">Password field can not be blank</mat-error>\n        </mat-form-field>\n\n            <button mat-button  (click)="onSubmit()" class="s_getmyoffer_login_button"  >Login</button>\n        </mat-card-content>\n\n\n    </div>\n\n  </mat-card>--\x3e\n\n\n\n</div>',styles:[".container{background:#fff}.lib-pager-class{display:block;clear:both;float:right}body{font-family:Roboto,Arial,sans-serif;margin:0;display:none!important}.clear{clear:both;display:block}.float-right{float:right;display:inline;clear:none}.pad-gap{margin-left:18px}.basic-container{padding:30px}.version-info{font-size:8pt;float:right}table{width:100%}th.mat-sort-header-sorted{color:#000}.cursor{cursor:pointer!important}.custom-modalbox{display:none}.module_imgblock{display:block;width:100px;overflow:hidden;text-align:center;vertical-align:middle;background:#111}.module_imgblock img{width:100%;height:auto}.module_videoblock{display:block;width:100px;position:relative;overflow:hidden;text-align:center;vertical-align:middle;background:#111}.module_videoblock img{width:100%;height:auto}.module_videoblock::after{content:'';display:block;width:30%;height:38%;background:url(image/video-play-arrow-png.png) 0 0/cover no-repeat;position:absolute;left:31%;top:30%}.tablewrapper tr td,.tablewrapper tr th{padding:5px}"]}]}],ListingComponent.ctorParameters=function(){return[{type:ApiService},{type:material.MatDialog},{type:material.MatBottomSheet},{type:forms.FormBuilder},{type:router.Router},{type:i0.ComponentFactoryResolver},{type:i0.ViewContainerRef},{type:http.HttpClient},{type:platformBrowser.DomSanitizer},{type:snackBar.MatSnackBar}]},ListingComponent.propDecorators={search_settings:[{type:i0.Input}],click_to_add_ananother_page:[{type:i0.Input}],limitcond:[{type:i0.Input}],date_search_source_count:[{type:i0.Input}],grab_link:[{type:i0.Input}],custombutton:[{type:i0.Input}],date_search_source:[{type:i0.Input}],sortdata:[{type:i0.Input}],date_search_endpoint:[{type:i0.Input}],url:[{type:i0.Input}],searchendpoint:[{type:i0.Input}],pdf_link:[{type:i0.Input}],searchList:[{type:i0.Input}],libdata:[{type:i0.Input}],datasource:[{type:i0.Input}],datacollection:[{type:i0.Input}],skip:[{type:i0.Input}],detail_datatype:[{type:i0.Input}],detail_skip_array:[{type:i0.Input}],sourcedata:[{type:i0.Input}],modify_header_array:[{type:i0.Input}],deleteendpoint:[{type:i0.Input}],updateendpoint:[{type:i0.Input}],apiurl:[{type:i0.Input}],updatetable:[{type:i0.Input}],jwttoken:[{type:i0.Input}],statusarr:[{type:i0.Input}],emailarray:[{type:i0.Input}],editroute:[{type:i0.Input}],preview_artistxp:[{type:i0.Input}],sort:[{type:i0.ViewChild,args:[material.MatSort]}],paginator:[{type:i0.ViewChild,args:[material.MatPaginator]}]},ListingComponent}(),Confirmdialog=(Nf.prototype.onNoClick=function(){this.dialogRef.close()},Nf.prototype.deletenote=function(t){var n=this,e={id:this.data.rowdata._id,index:t};this.data.loading1=t,this._apiService.postSearch(this.data.apiurl+this.data.notedata.deleteendpoint,this.data.jwttokenval,e).subscribe(function(e){"success"==e.status&&(n.data.listdata.splice(t,1),n.data.loading1=null)})},Nf.prototype.addnotes=function(){var t=this;if(null!=this.data.notesval&&""!=this.data.notesval){var e={id:this.data.rowdata._id,note:this.data.notesval,user:this.data.notedata.user};this.data.loading=!0,this._apiService.postSearch(this.data.apiurl+this.data.notedata.addendpoint,this.data.jwttokenval,e).subscribe(function(e){"success"==e.status&&(null==t.data.listdata&&(t.data.listdata=[]),t.data.listdata.unshift({_id:t.data.rowdata._id,notes:{userid:t.data.notedata.user,note:t.data.notesval,user:t.data.notedata.currentuserfullname,created_date:Date.now()}}),t.data.notesval="",t.data.loading=null)})}},Nf.prototype.gettypeof=function(e){return typeof e},Nf.prototype.sanitizeUrl=function(e,t,n){for(var a in t)e=e+"/"+n[t[a]];return this.sanitizer.bypassSecurityTrustResourceUrl(e)},Nf.decorators=[{type:i0.Component,args:[{selector:"confirmdialog",template:'<div class="maindialog maindialognew">\n\n    <div class="dialoghead" *ngIf="data.preview != true">\n        <h1 mat-dialog-title *ngIf="data!=null && data.message!=null">Hey !</h1>\n        <h1 mat-dialog-title *ngIf="data!=null && data.data!=null && data.data[0]==null">Details </h1>\n        <div mat-dialog-content>\n            <p *ngIf="data!=null && data.message!=null">{{data.message}}</p>\n\n            <ng-container *ngIf="data.notes!=null && data.notes==true">\n                \x3c!-- <ng-container *ngFor="let note of data.listdata;"> --\x3e\n                <mat-list>\n                    <div mat-subheader>Notes</div>\n                    \x3c!-- <section class="example-section">\n                        <mat-progress-bar class="example-margin" [color]="data.color" [mode]="data.mode"\n                            [value]="data.loadervalue" [bufferValue]="data.bufferValue">\n                        </mat-progress-bar>\n                        <br />\n                        <br />\n                    </section> --\x3e\n                    <mat-list-item *ngFor="let note of data.listdata;let notej=index;">\n                        \x3c!-- <p>{{note.notes | json}}</p> --\x3e\n                        <span class="material-icons">\n                            notes\n                        </span>\n                        <div mat-line>\n                            {{note.notes.note }}\n                        </div>\n                        \x3c!-- <div mat-line class="line-user"><span>By:</span>{{note.note.userid}}</div> --\x3e\n                        \x3c!-- <div mat-line class="line-user"><span>This User:</span>{{data.notedata.user}}</div> --\x3e\n                        <div mat-line class="line-user"><span>By:</span>{{note.notes.user}}</div>\n                        <div mat-line class="line-datetime"> <span>On:</span>\n                            {{note.notes.created_date | date:\'medium\' }}\n                        </div>\n                        <span *ngIf="note.notes.userid==data.notedata.user" class="material-icons"\n                            (click)="deletenote(notej)">\n                            delete\n                        </span>\n                        <div mat-line *ngIf="data.loading1!=null && data.loading1== notej ">\n                            <section class="example-section">\n                                <mat-progress-bar class="example-margin" [color]="data.color" [mode]="data.mode"\n                                    [value]="data.loadervalue" [bufferValue]="data.bufferValue">\n                                </mat-progress-bar>\n                                <br />\n                                <br />\n                            </section>\n                        </div>\n\n\n                    </mat-list-item>\n                    <mat-divider></mat-divider>\n                </mat-list>\n                <div>\n                    <textarea rows="5" cols="25" [(ngModel)]="data.notesval">\n                    </textarea>\n                    <button mat-button (click)="addnotes()">Add Note</button>\n\n                </div>\n                <section *ngIf="data.loading !=null && data.loading == true" class="example-section">\n                    <mat-progress-bar class="example-margin" [color]="data.color" [mode]="data.mode"\n                        [value]="data.loadervalue" [bufferValue]="data.bufferValue">\n                    </mat-progress-bar>\n                    <br />\n                    <br />\n                </section>\n                \x3c!-- </ng-container> --\x3e\n            </ng-container>\n\n\n\n            <div *ngIf="data!=null && data.data!=null">\n\n\n\n                <mat-card class="example-card" *ngFor="let item of data.data;">\n                    <mat-card-header id="dialogdata{{item[0]}}">\n                        \x3c!--<div mat-card-avatar class="example-header-image"></div>--\x3e\n                        <mat-card-title>{{item[0]}}</mat-card-title>\n                    </mat-card-header>\n                    \x3c!--<img mat-card-image src="https://material.angular.io/assets/img/examples/shiba2.jpg" alt="Photo of a Shiba Inu">--\x3e\n                    <mat-card-content id="dialogdata{{item[0]}}">\n                        \x3c!-- {{gettypeof(item[1])}} --\x3e\n                        <p class="innerhtml-content"\n                            *ngIf="(item[2]==null && gettypeof(item[1]) !=\'object\' ) || ( item[2]!=null &&  !item[2].includes(\'date\') && !item[2].includes(\'datetime\') && gettypeof(item[1]) != \'object\')"\n                            [innerHtml]="item[1]">\n                        </p>\n                        <p class="innerhtml-content-video"\n                            *ngIf="(item[2]==null && gettypeof(item[1]) ==\'object\' && item[0]!=\'image_array\' ) || ( item[2]!=null &&  !item[2].includes(\'date\') && !item[2].includes(\'datetime\') && gettypeof(item[1]) == \'object\' && (item[0]==\'video\' || item[0]=\'vd_array\' )) "\n                            [innerHtml]="item[1]">\n\n                        </p>\n                        <p *ngIf="item[2]!=null && item[2].includes(\'date\') && !item[2].includes(\'datetime\') ">\n                            {{item[1] | date}}\n                        </p>\n                        <p *ngIf="item[2]!=null && item[2].includes(\'date\') && item[2].includes(\'datetime\') ">\n                            {{item[1] | date:\'medium\' }}\n                        </p>\n                        \x3c!-- length : {{item[1].length}} {{gettypeof(item[1])}} --\x3e\n                        <p *ngIf=" gettypeof(item[1]) == \'object\' && item[0]!==\'video\' && !item[0].includes(\'vd\')  ">\n                            \x3c!-- in ng for .. --\x3e\n                            <ng-container *ngFor="let arr of item[1];">\n                                <span\n                                    *ngIf=" !item[0].includes(\'image\') &&  (item[2]!=null &&   !item[2].includes(\'image\') ) && item[0] !=\'video_array\'"\n                                    [innerHtml]="arr"></span>\n                                <span\n                                    *ngIf="item[0].includes(\'image\') || (item[2]!=null && item[2].includes(\'image\')) ">\n                                    <img [src]="arr" [alt]="arr">\n                                </span>\n                                <span\n                                    *ngIf="item[0].includes(\'video_array\') || (item[2]!=null && item[2].includes(\'video_array\'))"\n                                    [innerHtml]="arr">\n\n                                </span>\n\n                            </ng-container>\n                        </p>\n                    </mat-card-content>\n                </mat-card>\n\n            </div>\n\n            \x3c!--for custom page in modal(mainly used for tree)--\x3e\n            <div *ngIf="data!=null && data.data!=null  && data.data[0]!=null &&  data.data[0].customdata!=null">\n\n                <iframe class="custom-datadiv" height="auto" [src]="data.data[0].customdata"></iframe>\n\n            </div>\n\n        </div>\n    </div>\n\n\n    <div *ngIf="data.preview == true">\n        <lib-singlepost [post1]="data.previewData.res[0].posts" [user]=""></lib-singlepost>\n    </div>\n\n\n\n\n\n    <div mat-dialog-actions *ngIf="data.preview != true">\n        <button mat-button *ngIf="data.isconfirmation==null ||  data.isconfirmation!=false" (click)="onNoClick()">No\n            Thanks</button>\n        <button mat-button mat-dialog-close="yes" cdkFocusInitial>Ok</button>\n    </div>\n\n</div>'}]}],Nf.ctorParameters=function(){return[{type:ApiService},{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]},{type:platformBrowser.DomSanitizer}]},Nf);function Nf(e,t,n,a){this._apiService=e,this.dialogRef=t,this.data=n,this.sanitizer=a,this.data.color="primary",this.data.mode="indeterminate",this.data.loadervalue=50,this.data.bufferValue=76}var BottomSheet=(eg.prototype.openLink=function(e){this.bottomSheetRef.dismiss(e)},eg.decorators=[{type:i0.Component,args:[{selector:"bottom-sheet",template:'\n\n<mat-nav-list class="navlist">\n\n\n    <a *ngFor="let item of data.items;"  mat-list-item (click)="openLink(item)">\n        <span class="bottom-sheet{{item.name}}" mat-line>{{item.name}}</span>\n    </a>\n\n\n</mat-nav-list>\n'}]}],eg.ctorParameters=function(){return[{type:material.MatBottomSheetRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_BOTTOM_SHEET_DATA]}]}]},eg);function eg(e,t){this.bottomSheetRef=e,this.data=t}var VideoPlayer=(ig.prototype.onNoClick=function(){this.dialogRef.close()},ig.decorators=[{type:i0.Component,args:[{selector:"videoplayer",template:'<lib-youtubeplayer [videoid]="data.previewData.video"></lib-youtubeplayer>\n<button type="button" mat-dialog-close class="closemodal">x</button>'}]}],ig.ctorParameters=function(){return[{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]}]},ig);function ig(e,t){this.dialogRef=e,this.data=t}var ImageView=(lg.prototype.addnotes=function(){},lg.prototype.onNoClick=function(){this.dialogRef.close()},lg.decorators=[{type:i0.Component,args:[{selector:"image",template:'<mat-card class="imgmodalcls">\n    <mat-card-container>\n        <span>\n            <img src={{data.alldata}} height="100%" width="100%">\n        </span>\n        <button mat-button mat-dialog-close="yes" cdkFocusInitial>Close</button>        \n    </mat-card-container>\n    </mat-card>'}]}],lg.ctorParameters=function(){return[{type:material.MatDialogRef},{type:undefined,decorators:[{type:i0.Inject,args:[material.MAT_DIALOG_DATA]}]}]},lg);function lg(e,t){this.dialogRef=e,this.data=t}var SnackbarComponent=(og.decorators=[{type:i0.Component,args:[{selector:"snack-bar-component-example-snack",template:'<span class="snack-bar-message">\n  {{data.errormessage}}\n</span>\n',styles:["\n    .example-pizza-party {\n      color: hotpink;\n    }\n  "]}]}],og.ctorParameters=function(){return[{type:snackBar.MatSnackBarRef},{type:undefined,decorators:[{type:i0.Inject,args:[snackBar.MAT_SNACK_BAR_DATA]}]}]},og);function og(e,t){this.snackBarRef=e,this.data=t}var ShowformComponent=(Object.defineProperty(rg.prototype,"formdata",{set:function(e){this.formdataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(rg.prototype,"formfieldrefreshdata",{set:function(e){this.formfieldrefreshdataval=e},enumerable:!0,configurable:!0}),Object.defineProperty(rg.prototype,"formfieldrefresh",{set:function(e){this.formfieldrefreshval=e},enumerable:!0,configurable:!0}),rg.prototype.ngOnInit=function(){this.createForm(0)},rg.prototype.navtocancel=function(){null!=this.formdataval.cancelroute&&this.router.navigate([this.formdataval.cancelroute])},rg.prototype.ngAfterViewInit=function(){var t=this;setTimeout(function(){for(var e in console.log("in after view init trigger"),t.formdataval.fields)"file"==t.formdataval.fields[e].type&&(t.elementRef.nativeElement.querySelector("#drop"+t.formdataval.fields[e].name).addEventListener("drop",t.handleDrop.bind(t)),t.elementRef.nativeElement.querySelector("#drop"+t.formdataval.fields[e].name).addEventListener("dragenter",t.cancel.bind(t)),t.elementRef.nativeElement.querySelector("#drop"+t.formdataval.fields[e].name).addEventListener("dragover",t.cancel.bind(t)))},1e3)},rg.prototype.triggerevents=function(e){var t=this;console.log("in triggerevents",e),setTimeout(function(){console.log("val loadeed trigger",e),t.elementRef.nativeElement.querySelector("#drop"+e.name).addEventListener("drop",t.handleDrop.bind(t)),t.elementRef.nativeElement.querySelector("#drop"+e.name).addEventListener("dragenter",t.cancel.bind(t)),t.elementRef.nativeElement.querySelector("#drop"+e.name).addEventListener("dragdragover",t.cancel.bind(t))},1e3)},rg.prototype.cancel=function(e){return e.preventDefault(),!1},rg.prototype.handleDrop=function(e){var t=this;document.getElementById("list"),e.preventDefault(),console.log("handleDrop",e);for(var n=e.dataTransfer.files,a=0;a<n.length;a++)for(var o in n[a],console.log(n,"files",e.target.id),console.log("farr",this.filearray),this.formdataval.fields)if("file"==this.formdataval.fields[o].type&&this.formdataval.fields[o].name==e.target.id.replace("drop",""))if(console.log("file details",this.formdataval.fields[o]),null==this.formdataval.fields[o].multiple)if(null!=this.filearray[e.target.id.replace("drop","")])for(var i in this.formdataval.fields)this.formdataval.fields[i].name==e.target.id.replace("drop","")&&(this.deletefile(this.formdataval.fields[i],1),setTimeout(function(){t.filearray[e.target.id.replace("drop","")]=n[0]},300));else this.filearray[e.target.id.replace("drop","")]=n[0];else null==this.filearray[e.target.id.replace("drop","")]&&(this.filearray[e.target.id.replace("drop","")]=[]),this.filearray[e.target.id.replace("drop","")].push(n[0]),console.log("files[0]",n[0]);return!1},rg.prototype.uploadfile=function(t){console.log("upppp",t);var n=new FileReader,a=this.filearray[t.name];a.uploaded=2,this.fieldloading[t.name],t.name,n.onloadend=function(e){fetch(t.apiurl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t.prefix+a.name,type:a.type,path:t.path,bucket:t.bucket})}).then(function(e){return e.json()}).then(function(e){return fetch(e.uploadURL,{method:"PUT",body:new Blob([n.result],{type:a.type})})}).then(function(){a.uploaded=1,a.fileservername=t.prefix+a.name,console.log(a.type,"file.type")})},n.readAsArrayBuffer(a)},rg.prototype.uploadall=function(e){for(var t in this.filearray[e.name])this.uploadfilemultiple(e,this.filearray[e.name][t],t)},rg.prototype.deletefilemultipleall=function(e){var t=this;for(var n in this.filearray[e.name])this.deletefilemultiple(e,this.filearray[e.name][n],n);setTimeout(function(){t.filearray[e.name]=null},2e3)},rg.prototype.uploadfilemultiple=function(t,e,n){var a=new FileReader,o=this.filearray[t.name][n];null==this.filecount[t.name]&&(this.filecount[t.name]=0),this.filecount[t.name]++,o.uploaded=2,this.fieldloading[t.name],t.name,a.onloadend=function(e){fetch(t.apiurl,{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({name:t.prefix+o.name,type:o.type,path:t.path,bucket:t.bucket})}).then(function(e){return e.json()}).then(function(e){return fetch(e.uploadURL,{method:"PUT",body:new Blob([a.result],{type:o.type})})}).then(function(){o.uploaded=1,o.fileservername=t.prefix+o.name})},a.readAsArrayBuffer(o)},rg.prototype.deletefile=function(n,a){var o=this;void 0===a&&(a="");var e={},t=this.filearray[n.name];e.file=n.prefix+t.name,e.path=n.path,e.bucket=n.bucket,this._apiService.postSearch(n.apideleteurl,this.formdataval.jwttoken,e).subscribe(function(e){var t;"success"==(t=e).status&&""==a&&(o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Deleted !!"}}),o.filearray[n.name]=null),"error"==t.status&&o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),o.loading=!1})},rg.prototype.deletefilemultiple=function(n,e,a){var o=this;void 0===e&&(e="");var t={},i=this.filearray[n.name][a];this.filecount[n.name]--,t.file=n.prefix+i.name,t.path=n.path,t.bucket=n.bucket,this._apiService.postSearch(n.apideleteurl,this.formdataval.jwttoken,t).subscribe(function(e){var t;"success"==(t=e).status&&(o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Deleted !!"}}),o.filearray[n.name].splice(a,1)),"error"==t.status&&o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t})},function(e){o._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),o.loading=!1})},rg.prototype.ngOnChanges=function(e){var t=this;for(var n in e)"formfieldrefreshdata"==n&&setTimeout(function(){null!=t.formfieldrefreshdataval&&(null!=t.formGroup&&null!=t.formGroup.controls[t.formfieldrefreshdataval.field]&&t.formGroup.controls[t.formfieldrefreshdataval.field].patchValue(t.formfieldrefreshdataval.value),"showfieldloader"==t.formfieldrefreshdataval.field&&(t.fieldloading=t.formfieldrefreshdataval.value),"addfromcontrol"==t.formfieldrefreshdataval.field&&t.managefromcontrol(t.formfieldrefreshdataval.value,"add"),"removefromcontrol"==t.formfieldrefreshdataval.field&&t.managefromcontrol(t.formfieldrefreshdataval.value,"remove"))},0)},rg.prototype.inputblur=function(e){this.formGroup.controls[e].markAsUntouched()},rg.prototype.filterautocomplete=function(e,t){this.inputblur(e);var n=this.formGroup.controls[e].value;if(""==n||null==n)this.filerfielddata=[];else{var a=t.val.filter(function(e){return e.val.includes(n)});this.filerfielddata=[],this.filerfielddata=a}},rg.prototype.reloadautocomplete=function(e){this.currentautocomplete=e.name},rg.prototype.removechipsingle=function(e){this.autocompletefiledvalue[e.name]=null},rg.prototype.removechipmultiple=function(e,t){this.autocompletefiledvalue[e.name].splice(t,1),0==this.autocompletefiledvalue[e.name].length&&(this.autocompletefiledvalue[e.name]=null)},rg.prototype.setautocompletevalue=function(e,t){null==t.multiple?this.autocompletefiledvalue[t.name]=e.key:(null==this.autocompletefiledvalue[t.name]&&(this.autocompletefiledvalue[t.name]=[]),this.autocompletefiledvalue[t.name].push(e.key)),this.formGroup.controls[t.name].patchValue(null),this.inputblur(t.name)},rg.prototype.managefromcontrol=function(e,t){if("remove"==t)for(var n in this.formdataval.fields)this.formdataval.fields[n].name==e.name&&(this.formdataval.fields.splice(parseInt(n),1),this.formGroup.removeControl(e.name));if("add"==t)if(null!=e.after)for(var n in this.formdataval.fields)this.formdataval.fields[n].name==e.after&&(this.formdataval.fields.splice(parseInt(n)+1,0,e),this.createForm(1));else if("object"==typeof e)for(var a in e)for(var n in this.formdataval.fields)null!=e[a]&&null!=e[a].name&&this.formdataval.fields[n].name==e[a].after&&(this.formdataval.fields.splice(parseInt(n)+1,0,e[a]),this.createForm(1))},rg.prototype.checkchange=function(e,t){if(console.log(e,"change",t,"index"),this.onFormFieldChange.emit({field:e,fieldval:this.formGroup.controls[e.name].value,fromval:this.formGroup.value}),null!=e.dependent&&0<e.dependent.length){var n=0;for(var a in e.dependent)if(e.dependent[a].condval.toString()==this.formGroup.controls[e.name].value.toString())n++,this.formdataval.fields.splice(parseInt(t+parseInt(n)),0,e.dependent[a].field),this.createForm(1);else for(var o in this.formdataval.fields)this.formdataval.fields[o].name==e.dependent[a].field.name&&(this.formdataval.fields.splice(parseInt(o),1),this.formGroup.removeControl(e.dependent[a].field.name))}},rg.prototype.createForm=function(e){var t=this;for(var n in void 0===e&&(e=0),0==e&&(this.formGroup=this.formBuilder.group({})),this.formdataval.fields)if(null==this.formGroup.controls[this.formdataval.fields[n]]){var a=[],o=[];if(null!=this.formdataval.fields[n].value?a.push(this.formdataval.fields[n].value):a.push(""),"file"==this.formdataval.fields[n].type)if(this.filearray[this.formdataval.fields[n].name]=this.formdataval.fields[n].value,null!=this.formdataval.fields[n].multiple&&1==this.formdataval.fields[n].multiple){for(var i in this.filearray[this.formdataval.fields[n].name])null!=this.filearray[this.formdataval.fields[n].name][i]&&(this.filearray[this.formdataval.fields[n].name][i].uploaded=1);null!=this.filearray[this.formdataval.fields[n].name]&&(this.filecount[this.formdataval.fields[n].name]=this.filearray[this.formdataval.fields[n].name].length)}else null!=this.filearray[this.formdataval.fields[n].name]&&(this.filearray[this.formdataval.fields[n].name].uploaded=1);if("checkbox"==this.formdataval.fields[n].type&&null!=this.formdataval.fields[n].multiple&&1==this.formdataval.fields[n].multiple)if(null==this.formdataval.fields[n].value)a.push([]);else if(null!=this.formdataval.fields[n].val){var l=[];for(var r in this.formdataval.fields[n].val)null!=this.formdataval.fields[n].value&&this.formdataval.fields[n].value.includes(this.formdataval.fields[n].val[r].key)?l.push(!0):l.push(!1);a.push(l)}if(null!=this.formdataval.fields[n].validations&&0<this.formdataval.fields[n].validations.length)for(var s in this.formdataval.fields[n].validations)null==this.formdataval.fields[n].validations[s].message&&(this.formdataval.fields[n].validations[s].message="Not Valid !!"),"required"==this.formdataval.fields[n].validations[s].rule&&o.push(forms.Validators.required),"match"==this.formdataval.fields[n].validations[s].rule&&this.formGroup.setValidators(this.checkPasswords),"autorequired"==this.formdataval.fields[n].validations[s].rule&&this.formGroup.setValidators(this.autorequired),"pattern"==this.formdataval.fields[n].validations[s].rule&&o.push(forms.Validators.pattern(this.formdataval.fields[n].validations[s].value)),"maxLength"==this.formdataval.fields[n].validations[s].rule&&o.push(forms.Validators.maxLength(this.formdataval.fields[n].validations[s].value)),"min"==this.formdataval.fields[n].validations[s].rule&&o.push(forms.Validators.min(this.formdataval.fields[n].validations[s].value)),"max"==this.formdataval.fields[n].validations[s].rule&&o.push(forms.Validators.max(this.formdataval.fields[n].validations[s].value)),"minLength"==this.formdataval.fields[n].validations[s].rule&&o.push(forms.Validators.minLength(this.formdataval.fields[n].validations[s].value));if("checkbox"==this.formdataval.fields[n].type&&null!=this.formdataval.fields[n].multiple&&1==this.formdataval.fields[n].multiple){var d=!1;for(var c in this.formdataval.fields[n].val)d=!(null==this.formdataval.fields[n].value||!this.formdataval.fields[n].value.includes(this.formdataval.fields[n].val[c].key)),this.formGroup.addControl(this.formdataval.fields[n].name+"__"+c,new forms.FormControl(d,o))}else this.formGroup.addControl(this.formdataval.fields[n].name,new forms.FormControl({value:a[0],disabled:this.formdataval.fields[n].disabled},o))}setTimeout(function(){t.showform=!0,null==t.formdataval.submitactive&&(t.formdataval.submitactive=!0)},10)},rg.prototype.setChangeValidate=function(){var t=this;this.formGroup.get("validate").valueChanges.subscribe(function(e){"1"==e?(t.formGroup.get("name").setValidators([forms.Validators.required,forms.Validators.minLength(3)]),t.titleAlert="You need to specify at least 3 characters"):t.formGroup.get("name").setValidators(forms.Validators.required),t.formGroup.get("name").updateValueAndValidity()})},Object.defineProperty(rg.prototype,"name",{get:function(){return this.formGroup.get("name")},enumerable:!0,configurable:!0}),rg.prototype.checkPasswords=function(e){var t=e.controls.password.value,n=e.controls.confirmpassword.value;return null==n||""==n?(e.controls.confirmpassword.setErrors({required:!0}),{required:!0}):t!=n?(e.controls.confirmpassword.setErrors({match:!0}),{match:!0}):void 0},rg.prototype.checkPassword=function(e){var t=e.value;return!/^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})/.test(t)&&t?{requirements:!0}:null},rg.prototype.autorequired=function(e){for(var t in e)if("autocomplete"==e[t].type&&null!=e[t].validations&&null!=e[t].validations[0]&&"autorequired"==e[t].validations[0].rule&&null==this.autocompletefiledvalue[e[t].name])return this.formGroup.controls[e.name].setErrors({autorequired:!0}),{autorequired:!0}},rg.prototype.checkInUseEmail=function(n){var a=["tony@gmail.com"];return new rxjs.Observable(function(t){setTimeout(function(){var e=-1!==a.indexOf(n.value)?{alreadyInUse:!0}:null;t.next(e),t.complete()},4e3)})},rg.prototype.getError=function(e){return this.formGroup.get("email").hasError("required")?"Field is required":this.formGroup.get("email").hasError("pattern")?"Not a valid emailaddress":this.formGroup.get("email").hasError("alreadyInUse")?"This emailaddress is already in use":""},rg.prototype.getErrorPassword=function(){return this.formGroup.get("password").hasError("required")?"Field is required (at least eight characters, one uppercase letter and one number)":this.formGroup.get("password").hasError("requirements")?"Password needs to be at least eight characters, one uppercase letter and one number":""},rg.prototype.onSubmit=function(e){var n=this;this.post=e;var t={};for(var a in this.formGroup.controls){this.formGroup.controls[a].markAsTouched();var o=a.split("__");for(var i in this.formdataval.fields){if("file"==this.formdataval.fields[i].type&&null==this.formdataval.fields[i].multiple&&null!=this.filearray[this.formdataval.fields[i].name]&&null!=this.filearray[this.formdataval.fields[i].name]&&1==this.filearray[this.formdataval.fields[i].name].uploaded&&((s={}).fileservername=this.filearray[this.formdataval.fields[i].name].fileservername,s.name=this.filearray[this.formdataval.fields[i].name].name,s.size=this.filearray[this.formdataval.fields[i].name].size,s.type=this.filearray[this.formdataval.fields[i].name].type,s.path=this.formdataval.fields[i].path,s.bucket=this.formdataval.fields[i].bucket,s.baseurl=this.formdataval.fields[i].baseurl,this.formGroup.controls[this.formdataval.fields[i].name].patchValue(s)),"file"==this.formdataval.fields[i].type&&null!=this.formdataval.fields[i].multiple&&1==this.formdataval.fields[i].multiple){var l=[];for(var r in this.filearray[this.formdataval.fields[i].name]){var s;null!=this.filearray[this.formdataval.fields[i].name][r]&&1==this.filearray[this.formdataval.fields[i].name][r].uploaded&&((s={}).fileservername=this.filearray[this.formdataval.fields[i].name][r].fileservername,s.name=this.filearray[this.formdataval.fields[i].name][r].name,s.size=this.filearray[this.formdataval.fields[i].name][r].size,s.type=this.filearray[this.formdataval.fields[i].name][r].type,s.path=this.formdataval.fields[i].path,s.bucket=this.formdataval.fields[i].bucket,s.baseurl=this.formdataval.fields[i].baseurl,l.push(s)),this.formGroup.controls[this.formdataval.fields[i].name].patchValue(l)}}if("autocomplete"==this.formdataval.fields[i].type&&(null!=this.autocompletefiledvalue&&null!=this.autocompletefiledvalue[this.formdataval.fields[i].name]&&null!=this.formdataval.fields[i].validations?this.formGroup.controls[this.formdataval.fields[i].name].setErrors({required:null}):this.formGroup.controls[this.formdataval.fields[i].name].setErrors({required:!0}),a==this.formdataval.fields[i].name&&null==t[a]&&(t[a]=this.autocompletefiledvalue[this.formdataval.fields[i].name])),1<o.length&&o[0]==this.formdataval.fields[i].name&&this.formdataval.fields[i].name!=a&&"checkbox"==this.formdataval.fields[i].type&&null!=this.formdataval.fields[i].multiple&&1==this.formGroup.controls[a].value)for(var d in this.formdataval.fields[i].val)this.formdataval.fields[i].val[d].key==o[1]&&(null==t[this.formdataval.fields[i].name]&&(t[this.formdataval.fields[i].name]=[]),t[this.formdataval.fields[i].name].push(o[1]));a==this.formdataval.fields[i].name&&null==t[a]&&(t[a]=this.formGroup.controls[a].value)}}if(this.formGroup.valid){this.loading=!0;var c=this.formdataval.apiUrl+this.formdataval.endpoint,u={};u.data=this.formGroup.value,this._apiService.postSearch(c,this.formdataval.jwttoken,u).subscribe(function(e){var t;"success"==(t=e).status&&(n.onFormFieldChange.emit({field:"fromsubmit",fieldval:t.status,fromval:t}),n.formGroup.reset(),n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:n.formdataval.successmessage}}),null!=n.formdataval.redirectpath&&""!=n.formdataval.redirectpath&&"/"!=n.formdataval.redirectpath?n.router.navigate([n.formdataval.redirectpath]):n.loading=!1),"error"==t.status&&(n.onFormFieldChange.emit({field:"fromsubmit",fieldval:t.status,fromval:t}),n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:t}))},function(e){n._snackBar.openFromComponent(SnackbarComponent,{duration:6e3,data:{errormessage:"Something Went Wrong ,Try Again!!"}}),n.loading=!1})}},rg.prototype.fileChangeEvent=function(e){this.imageChangedEvent=e,console.log("event",e)},rg.prototype.imageCropped=function(e){this.croppedImage=e.base64,console.log("this.croppedImage",e)},rg.prototype.imageLoaded=function(){},rg.prototype.cropperReady=function(){},rg.prototype.loadImageFailed=function(){},rg.decorators=[{type:i0.Component,args:[{selector:"lib-showform",template:'\x3c!--<mat-toolbar color="primary">\n  <span class="fill-remaining-space">My Reactive Form with Material</span>\n</mat-toolbar>--\x3e\n\n\n\n\n\n<section *ngIf="loading == true" class="example-section">\n    <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value" [bufferValue]="bufferValue">\n    </mat-progress-bar>\n</section>\n<div class="container" *ngIf="showform; else forminfo" novalidate>\n    <form [formGroup]="formGroup" (ngSubmit)="onSubmit(formGroup.value)" class="form">\n\n        <ng-container *ngIf="formdataval.fields!=null && formdataval.fields.length>0">\n            <ng-container *ngFor="let fields of formdataval.fields ; let ival=index;">\n\n                <div class="form_field_wrapper form_field_wrapper{{fields.name}}">\n                    <mat-card class="form_header_{{fields.name}}"\n                        *ngIf="fields.heading!=null && formGroup.controls[fields.name]!=null "\n                        [innerHTML]="fields.heading">\n                    </mat-card>\n                    <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'select\'  )"\n                        class="form-element form_field_{{fields.name}}">\n                        \x3c!-- for select--\x3e\n                        \x3c!-- <div>ff</div> --\x3e\n                        <mat-label> Select {{fields.label}} </mat-label>\n                        <mat-select (blur)="inputblur(fields.name)" (selectionChange)="checkchange(fields,ival)"\n                            [formControlName]="fields.name" [multiple]="fields.multiple?true:false">\n                            <mat-option *ngFor="let data of fields.val" [value]="data.val"> {{data.name}}</mat-option>\n                        </mat-select>\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                        <ng-container\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                            <mat-error>\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n                        </ng-container>\n\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\n                        </ng-container>\n\n\n                    </mat-form-field>\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'checkbox\' && fields.multiple==null )"\n                        class="form-element form_field_{{fields.name}}">\n                        \x3c!-- <input   (blur)="inputblur(fields.name)" [type]="fields.type"  [formControlName]="fields.name">--\x3e\n                        <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\n                        </mat-label>\n                        <mat-checkbox *ngIf="fields.multiple ==null && !fields.multiple" class=" example-margin"\n                            (blur)="inputblur(fields.name)" (change)="checkchange(fields,ival)"\n                            [formControlName]="fields.name" [labelPosition]="fields.labelPosition"> {{fields.label}}\n                        </mat-checkbox>\n\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                        <ng-container\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                            <mat-error>\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span\n                                        *ngIf=" formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n                        </ng-container>\n\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\n                        </ng-container>\n\n                    </div>\n                    <div *ngIf="fields.name!=null && (fields.type==\'checkbox\' ) && fields.multiple !=null && fields.multiple==true "\n                        class="form-element form_field_{{fields.name}}">\n                        \x3c!-- <input   (blur)="inputblur(fields.name)" [type]="fields.type"  [formControlName]="fields.name">--\x3e\n                        <mat-label *ngIf="fields.multiple !=null && fields.multiple" [innerHTML]="fields.label">\n                        </mat-label>\n\n                        <ng-container *ngIf="fields.multiple !=null && fields.multiple">\n                            <ng-container *ngFor="let vals of fields.val , let vi=index;">\n                                <mat-checkbox class="example-radio-button" (blur)="inputblur(fields.name)"\n                                    (change)="checkchange(fields,ival)" formControlName="{{fields.name}}__{{vi}}"\n                                    [value]="vals.key">{{vals.val}}\n                                </mat-checkbox>\n\n                            </ng-container>\n                        </ng-container>\n\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                        \x3c!-- <ng-container *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                        <mat-error >\n                            <ng-container *ngFor="let valdidations of fields.validations">\n                                <span *ngIf="formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                            </ng-container>\n                        </mat-error>\n\n                    </ng-container>--\x3e\n\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\n                        </ng-container>\n\n\n                    </div>\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'radio\' )"\n                        class="form-element form_field_{{fields.name}}">\n                        <mat-label [innerHTML]="fields.label"></mat-label>\n\n                        <mat-radio-group aria-labelledby="example-radio-group-label"\n                            class="example-radio-group form_field_{{fields.name}}" [formControlName]="fields.name">\n                            <mat-radio-button class=" example-radio-button" (blur)="inputblur(fields.name)"\n                                (change)="checkchange(fields,ival)" *ngFor="let vals of fields.val" [value]="vals.key">\n                                {{vals.val}}\n                            </mat-radio-button>\n                        </mat-radio-group>\n\n                        \x3c!--<ng-container *ngFor="let vals of fields.val">\n             <mat-checkbox class="form_field_{{fields.name}} example-radio-button" (blur)="inputblur(fields.name)"   [formControlName]="fields.name" [value]="vals.key">{{vals.val}}</mat-checkbox>\n\n         </ng-container>--\x3e\n\n\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                        <ng-container\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                            <mat-error>\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span\n                                        *ngIf=" formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n                        </ng-container>\n\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\n                        </ng-container>\n\n\n                    </div>\n                    <mat-form-field\n                        *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'email\' || fields.type==\'number\' || fields.type==\'text\' || fields.type==\'password\')"\n                        class="form-element form_field_{{fields.name}}">\n                        <mat-label [innerHTML]="fields.label"></mat-label>\n                        <input matInput (blur)="inputblur(fields.name)" [type]="fields.type"\n                            [placeholder]="fields.label" (change)="checkchange(fields,ival)"\n                            [formControlName]="fields.name">\n\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                        <ng-container\n                            *ngIf="formGroup.controls[fields.name] !=null && !formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                            <mat-error>\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n                        </ng-container>\n\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\n                        </ng-container>\n\n\n                    </mat-form-field>\n\n                    <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'textarea\' "\n                        class="form-element form_field_{{fields.name}}">\n                        <mat-label [innerHTML]="fields.label"></mat-label>\n                        <textarea matInput placeholder="Comment" [formControlName]="fields.name"\n                            (change)="inputblur(fields.name)">\n  </textarea>\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                        <ng-container\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                            <mat-error>\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n                        </ng-container>\n\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\n                        </ng-container>\n\n\n                    </mat-form-field>\n\n\n                    <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'date\' "\n                        class="form-element form_field_{{fields.name}}">\n                        <mat-label [innerHTML]="fields.label"></mat-label>\n\n                        <input matInput [matDatepicker]="picker1" [formControlName]="fields.name">\n                        <mat-datepicker-toggle matSuffix [for]="picker1"></mat-datepicker-toggle>\n                        <mat-datepicker #picker1></mat-datepicker>\n                        \x3c!-- <textarea matInput \n     placeholder="Comment" \n     [formControlName]="fields.name" \n     (change)="inputblur(fields.name)">\n  </textarea> --\x3e\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                        <ng-container\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                            <mat-error>\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n                        </ng-container>\n\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\n                        </ng-container>\n\n\n                    </mat-form-field>\n                    <mat-form-field *ngIf="formGroup.controls[fields.name]!=null && fields.type==\'autocomplete\' "\n                        class="form-element form_field_{{fields.name}}">\n                        <mat-label [innerHTML]="fields.label"></mat-label>\n                        \x3c!-- {{fields.val.length}}\n --\x3e\n\n\n\n                        \x3c!-- mat-input-element mat-form-field-autofill-control cdk-text-field-autofill-monitored ng-untouched ng-dirty ng-valid --\x3e\n                        \x3c!-- mat-input-element mat-form-field-autofill-control cdk-text-field-autofill-monitored ng-untouched ng-dirty ng-invalid --\x3e\n\n                        <input matInput (blur)="inputblur(fields.name)" (click)="reloadautocomplete(fields)"\n                            (keyup)=filterautocomplete(fields.name,fields) [formControlName]="fields.name"\n                            placeholder="{{fields.label}}" [matAutocomplete]="auto">\n\n                        \x3c!-- <mat-autocomplete #auto="matAutocomplete" *ngIf="currentautocomplete==fields.name || currentautocomplete==\'\' "> --\x3e\n                        <mat-autocomplete #auto="matAutocomplete">\n                            <ng-container *ngIf="filerfielddata!=null && filerfielddata.length>0 ">\n                                <mat-option *ngFor="let vals of filerfielddata " [value]="vals.key"\n                                    (click)="setautocompletevalue(vals,fields)">\n                                    \x3c!-- <img class="example-option-img" aria-hidden [src]="state.flag" height="25"> --\x3e\n                                    <span>{{vals.val}}</span>\n                                    \x3c!-- <small>Population: {{state.population}}</small> --\x3e\n                                </mat-option>\n                            </ng-container>\n                        </mat-autocomplete>\n\n\n\n\n\n                        <mat-chip-list *ngIf="autocompletefiledvalue[fields.name] !=null && fields.multiple==null"\n                            aria-label="{{fields.name}} data">\n                            <ng-container *ngFor="let vals of fields.val ">\n                                <ng-container *ngIf="vals.key==autocompletefiledvalue[fields.name]">\n                                    <mat-chip [removable]=true>{{vals.val}}\n                                        <mat-icon matChipRemove (click)="removechipsingle(fields)">cancel</mat-icon>\n                                    </mat-chip>\n                                </ng-container>\n\n                            </ng-container>\n\n                        </mat-chip-list>\n\n\n                        <mat-chip-list *ngIf="autocompletefiledvalue[fields.name] !=null && fields.multiple!=null"\n                            aria-label="{{fields.name}} data">\n                            <ng-container *ngFor="let vals of fields.val ">\n                                <ng-container *ngFor="let avals of autocompletefiledvalue[fields.name] ; let ib=index ">\n                                    <ng-container *ngIf="vals.key==avals">\n                                        <mat-chip [removable]=true>{{vals.val}}\n                                            <mat-icon matChipRemove (click)="removechipmultiple(fields,ib)">cancel\n                                            </mat-icon>\n                                        </mat-chip>\n                                    </ng-container>\n                                </ng-container>\n\n                            </ng-container>\n\n                        </mat-chip-list>\n\n                        \x3c!-- <textarea matInput \n     placeholder="Comment" \n     [formControlName]="fields.name" \n     (change)="inputblur(fields.name)">\n  </textarea> --\x3e\n                        <span *ngIf="fields.prefix!=null" matPrefix> {{fields.prefix}} &nbsp;</span>\n                        <span *ngIf="fields.suffix!=null" matSuffix>{{fields.suffix}}</span>\n\n                        <ng-container\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n\n                            <mat-error>\n                                <ng-container *ngFor="let valdidations of fields.validations">\n                                    <span\n                                        *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                                </ng-container>\n                            </mat-error>\n                        </ng-container>\n\n                        <ng-container *ngIf="  fields.hint!=null && formGroup.controls[fields.name]!=null  ">\n                            <mat-hint align="start">{{fields.hint}}</mat-hint>\n                        </ng-container>\n\n\n                    </mat-form-field>\n\n                    \x3c!-- [config]="{uiColor: \'#99000\'}" \n\n[readonly]="false"\n                (change)="onChange($event)"\n                (editorChange)="onEditorChange($event)" \n                (ready)="onReady($event)"\n                (focus)="onFocus($event)"\n                (blur)="onBlur($event)"\n                (contentDom)="onContentDom($event)"\n                (fileUploadRequest)="onFileUploadRequest($event)"\n                (fileUploadResponse)="onFileUploadResponse($event)"\n                (paste)="onPaste($event)"\n                (drop)="onDrop($event)"\n                debounce="500"\n\n                 [ngModelOptions]="{standalone: true}\n\n\n                   <ckeditor\n                [(ngModel)]="ckeditorContent"\n                [ngModelOptions]="{standalone: true}"\n                \n                \n                >\n              </ckeditor>\n--\x3e\n\n\n\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'editor\' )"\n                        class="form-element form_field_{{fields.name}}">\n                        \x3c!-- <input  (blur)="inputblur(fields.name)" type="{{fields.type}}" placeholder="{{fields.label}}" formControlName="{{fields.name}}"> --\x3e\n                        <ckeditor (blur)="inputblur(fields.name)" [formControlName]="fields.name">\n                        </ckeditor>\n                        <mat-error\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                            <ng-container *ngFor="let valdidations of fields.validations">\n                                <span\n                                    *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                            </ng-container>\n                        </mat-error>\n                    </div>\n\n\n\n\n\n\n\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'hidden\' )"\n                        class="form-element form_field_{{fields.name}}">\n                        <input (blur)="inputblur(fields.name)" type="{{fields.type}}" placeholder="{{fields.label}}"\n                            formControlName="{{fields.name}}">\n                        <mat-error\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                            <ng-container *ngFor="let valdidations of fields.validations">\n                                <span\n                                    *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                            </ng-container>\n                        </mat-error>\n                    </div>\n\n                    <div *ngIf="formGroup.controls[fields.name]!=null && (fields.type==\'file\' )"\n                        class="form-element form_field_{{fields.name}}">\n                        <mat-label [innerHTML]="fields.label"></mat-label>\n                        <div class="aligner" (load)="triggerevents(fields)">\n                            <div class="drop" (change)="fileChangeEvent($event)" [attr.fileid]="fields.name" id="drop{{fields.name}}" >Drop files here. \n                                \x3c!-- Or <br><input type="file" (change)="fileChangeEvent($event)" /> --\x3e\n                            </div>\n\n\n\n\n                            \x3c!-- <input type="file" (change)="fileChangeEvent($event)" /> --\x3e\n\n                            <image-cropper\n                                [imageChangedEvent]="imageChangedEvent"\n                                [maintainAspectRatio]="true"\n                                [aspectRatio]="4 / 3"\n                                format="jpeg"\n                                (imageCropped)="imageCropped($event)"\n                                (imageLoaded)="imageLoaded()"\n                                (cropperReady)="cropperReady()"\n                                (loadImageFailed)="loadImageFailed()"\n                            ></image-cropper>\n                            \n                            <img [src]="croppedImage" />\n                            \n\n\n                            <div class="filesid" id="list{{fields.name}}">\n                                <h1 *ngIf="filearray[fields.name]!=null ">Files:</h1>\n                                <ng-container *ngIf="filearray[fields.name]!=null  && fields.multiple==null">\n                                    <span *ngIf="filearray[fields.name].uploaded==1"\n                                        class="material-icons fileuploadcompleteicon ">\n                                        cloud_done\n                                    </span>\n                                    <span class="material-icons" *ngIf="filearray[fields.name].type == \'image/jpeg\' || filearray[fields.name].type == \'image/png\' || filearray[fields.name].type == \'image/jpg\'">\n                                        image\n                                    </span>\n                                \n                                    <span class="material-icons" *ngIf="filearray[fields.name].type == \'application/pdf\'">\n                                        picture_as_pdf\n                                    </span>\n                                \n                                    <span class="material-icons" *ngIf="filearray[fields.name].type == \'video/mp4\'">\n                                        movie_filter\n                                    </span>\n                                \n                                    <span class="material-icons" *ngIf="filearray[fields.name].type == \'text/csv\' || filearray[fields.name].type == \'text/plain\'">\n                                        description\n                                    </span>\n                                    <span\n                                        class="uploadedfilename uploadedfilename_{{filearray[fields.name]}}">{{filearray[fields.name].name}}</span>\n                                    <br />\n                                    <span\n                                        class="uploadedfiletype uploadedfiletype_{{filearray[fields.name]}}">{{filearray[fields.name].type}}</span>\n                                    <mat-chip class="fileuploadbutton" *ngIf="filearray[fields.name].uploaded==null "\n                                        mat-raised-button (click)="uploadfile(fields)">Upload</mat-chip>\n                                    <mat-chip class="filedeletebutton" *ngIf="filearray[fields.name].uploaded==1"\n                                        mat-raised-button (click)="deletefile(fields)">Delete</mat-chip>\n                                    \x3c!-- <mat-chip>Papadum</mat-chip> --\x3e\n\n                                    <section *ngIf="filearray[fields.name].uploaded==2 " class="example-section">\n                                        <mat-progress-bar class="example-margin" [color]="color" [mode]="mode"\n                                            [value]="value" [bufferValue]="bufferValue">\n                                        </mat-progress-bar>\n                                    </section>\n                                </ng-container>\n                                \x3c!-- for multiple file uploads  --\x3e\n                                <ng-container\n                                    *ngIf="filearray[fields.name]!=null && fields.multiple!=null  && fields.multiple==true">\n                                    <ng-container *ngFor="let files of filearray[fields.name]; let fi=index; ">\n                                        <span *ngIf="files.uploaded==1" class="material-icons fileuploadcompleteicon">\n                                            cloud_done\n                                        </span>\n\n                                        <span class="material-icons" *ngIf="files.type == \'image/jpeg\' || files.type == \'image/png\' || files.type == \'image/jpg\'">\n                                            image\n                                        </span>\n                                    \n                                        <span class="material-icons" *ngIf="files.type == \'application/pdf\'">\n                                            picture_as_pdf\n                                        </span>\n                                    \n                                        <span class="material-icons" *ngIf="files.type == \'video/mp4\'">\n                                            movie_filter\n                                        </span>\n                                    \n                                        <span class="material-icons" *ngIf="files.type == \'text/csv\' || files.type == \'text/plain\'">\n                                            description\n                                        </span>\n                                        \n\n                                        <span class="fileuploadednameclass">{{files.name}}</span>\n                                        <br />\n                                        <span class="fileuploadedtypeclass">{{files.type}}</span>\n                                        <mat-chip class="fileuploadbutton" *ngIf="files.uploaded==null "\n                                            mat-raised-button (click)="uploadfilemultiple(fields,files,fi)">Upload\n                                        </mat-chip>\n                                        <mat-chip class="filedeletebutton" *ngIf="files.uploaded==1" mat-raised-button\n                                            (click)="deletefilemultiple(fields,files,fi)">Delete </mat-chip>\n\n                                        <section *ngIf="files.uploaded==2 " class="example-section">\n                                            <mat-progress-bar class="example-margin" [color]="color" [mode]="mode"\n                                                [value]="value" [bufferValue]="bufferValue">\n                                            </mat-progress-bar>\n                                        </section>\n                                        <br />\n                                    </ng-container>\n                                    <mat-chip class="uploadallfile"\n                                        *ngIf="(filecount[fields.name]!=null && filecount[fields.name] !=filearray[fields.name].length ) || filecount[fields.name]==null"\n                                        mat-raised-button (click)="uploadall(fields)">Upload All</mat-chip>\n                                    <mat-chip class="deleteallfile" mat-raised-button\n                                        (click)="deletefilemultipleall(fields)">\n                                        Delete\n                                        All</mat-chip>\n                                </ng-container>\n\n\n                            </div>\n                        </div>\n\n                        <mat-error\n                            *ngIf="!formGroup.controls[fields.name].valid && formGroup.controls[fields.name].touched">\n                            <ng-container *ngFor="let valdidations of fields.validations">\n                                <span\n                                    *ngIf="formGroup.controls[fields.name].errors!=null && formGroup.controls[fields.name].errors[valdidations.rule.toLowerCase()]">{{valdidations.message}}</span>\n                            </ng-container>\n                        </mat-error>\n                    </div>\n\n\n                    <section *ngIf="fieldloading == fields.name " class="example-section">\n                        <mat-progress-bar class="example-margin" [color]="color" [mode]="mode" [value]="value"\n                            [bufferValue]="bufferValue">\n                        </mat-progress-bar>\n                    </section>\n                </div>\n\n            </ng-container>\n        </ng-container>\n\n\n\n        \x3c!-- <div class="aligner">\n            <div id="drop">Drop files here.</div>\n            <div id="list">\n              <h1>Uploaded Files:</h1>\n            </div>\n          </div> --\x3e\n\n        \x3c!-- <label for="singleFile">Upload file</label>\n<input id="singleFile" type="file" [fileUploadInputFor]= "fileUploadQueue"/>\n<br>\n\n<mat-file-upload-queue #fileUploadQueue\n    [fileAlias]="\'file\'"\n    [httpUrl]="\'https://tge24bc2ne.execute-api.us-east-1.amazonaws.com/dev\'">\n\n    <mat-file-upload [file]="file" [id]="i" *ngFor="let file of fileUploadQueue.files; let i = index"></mat-file-upload>\n</mat-file-upload-queue> --\x3e\n\n\n        \x3c!--<mat-form-field class="form-element">\n      <input matInput placeholder="Emailaddress" formControlName="email">\n      <mat-error *ngIf="!formGroup.controls[\'email\'].valid && formGroup.controls[\'email\'].touched">\n        {{ getErrorEmail() }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class="form-element">\n      <input matInput placeholder="Name" formControlName="name">\n      <mat-error *ngIf="!name.valid && name.touched">\n        {{ titleAlert }}\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class="form-element">\n      <textarea matInput placeholder="Description" matTextareaAutosize matAutosizeMinRows="2" matAutosizeMaxRows="5" formControlName="description"></textarea>\n      <mat-error *ngIf="!formGroup.controls[\'description\'].valid && formGroup.controls[\'description\'].touched">\n        Required field, must be between 5 and 10 characters.\n      </mat-error>\n    </mat-form-field>\n\n    <mat-form-field class="form-element">\n      <input matInput placeholder="Password" formControlName="password">\n      <mat-hint>Choose a password of at least eight characters, one uppercase letter and one number</mat-hint>\n      <mat-error *ngIf="!formGroup.controls[\'password\'].valid && formGroup.controls[\'password\'].touched">\n        {{ getErrorPassword() }}\n      </mat-error>\n    </mat-form-field>\n\n    <div class="form-element">\n      <mat-checkbox formControlName="validate" value="1">Name min. 3 characters</mat-checkbox>\n    </div>--\x3e\n\n        <div class="form-element">\n            <button mat-raised-button color="primary" type="submit" class="button"\n                [disabled]="!formdataval.submitactive">{{formdataval.submittext}}</button>\n            <button mat-raised-button color="primary" *ngIf="!formdataval.hidecancel" type="button" class="button"\n                (click)="navtocancel()">{{formdataval.canceltext}}</button>\n            <button mat-raised-button color="primary" *ngIf="!formdataval.hidereset" type="reset"\n                class="button">{{formdataval.resettext}}</button>\n        </div>\n\n    </form>\n</div>\n\n<ng-template #forminfo>\n    <div class="container">\n        {{ post | json }}\n    </div>\n</ng-template>',styles:[".drop{height:200px;width:200px;border-radius:100px;color:#fff;background-color:#baf;font-size:20px;display:flex;align-items:center}.aligner{height:100%;display:flex;align-items:center;justify-content:center;flex-direction:column}"]}]}],rg.ctorParameters=function(){return[{type:forms.FormBuilder},{type:ApiService},{type:snackBar.MatSnackBar},{type:router.Router},{type:i0.ElementRef}]},rg.propDecorators={formdata:[{type:i0.Input}],formfieldrefreshdata:[{type:i0.Input}],formfieldrefresh:[{type:i0.Input}],onFormFieldChange:[{type:i0.Output}]},rg);function rg(e,t,n,a,o){this.formBuilder=e,this._apiService=t,this._snackBar=n,this.router=a,this.elementRef=o,this.titleAlert="This field is required",this.post="",this.showform=!1,this.loading=!1,this.formfieldrefreshval=!1,this.formdataval={},this.formfieldrefreshdataval={},this.filerfielddata=[],this.autocompletefiledvalue=[],this.filearray=[],this.filecount=[],this.currentautocomplete="",this.fieldloading="",this.color="primary",this.mode="indeterminate",this.value=50,this.bufferValue=75,this.onFormFieldChange=new i0.EventEmitter,this.imageChangedEvent="",this.croppedImage=""}var DemoMaterialModule=(Li.decorators=[{type:i0.NgModule,args:[{exports:[a11y.A11yModule,stepper.CdkStepperModule,table.CdkTableModule,tree.CdkTreeModule,dragDrop.DragDropModule,material.MatAutocompleteModule,material.MatBadgeModule,material.MatBottomSheetModule,material.MatButtonModule,material.MatButtonToggleModule,material.MatCardModule,material.MatCheckboxModule,material.MatChipsModule,material.MatStepperModule,material.MatDatepickerModule,material.MatDialogModule,material.MatDividerModule,material.MatExpansionModule,material.MatGridListModule,material.MatIconModule,material.MatInputModule,material.MatListModule,material.MatMenuModule,material.MatNativeDateModule,material.MatPaginatorModule,material.MatProgressBarModule,material.MatProgressSpinnerModule,material.MatRadioModule,material.MatRippleModule,material.MatSelectModule,material.MatSidenavModule,material.MatSliderModule,material.MatSlideToggleModule,material.MatSnackBarModule,material.MatSortModule,material.MatTableModule,material.MatTabsModule,material.MatToolbarModule,material.MatTooltipModule,material.MatTreeModule,portal.PortalModule,scrolling.ScrollingModule]}]}],Li);function Li(){}var YoutubeplayerComponent=(Object.defineProperty(Mi.prototype,"videoid",{set:function(e){this.id=e||"<no name set>",this.id=this.sanitizer.bypassSecurityTrustResourceUrl("https://www.youtube.com/embed/"+e+"?autoplay=1")},enumerable:!0,configurable:!0}),Mi.prototype.ngOnInit=function(){},Mi.decorators=[{type:i0.Component,args:[{selector:"lib-youtubeplayer",template:'\n<iframe width="560" height="300" [src]="id" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>',styles:[""]}]}],Mi.ctorParameters=function(){return[{type:platformBrowser.DomSanitizer}]},Mi.propDecorators={videoid:[{type:i0.Input}]},Mi);function Mi(e){this.sanitizer=e}var ListingModule=(Pi.decorators=[{type:i0.NgModule,args:[{declarations:[ListingComponent,Confirmdialog,BottomSheet,YoutubeplayerComponent,VideoPlayer,ImageView,SnackbarComponent,ShowformComponent],imports:[common.CommonModule,platformBrowser.BrowserModule,animations.BrowserAnimationsModule,DemoMaterialModule,forms.FormsModule,forms.ReactiveFormsModule,router.RouterModule,ngxMoment.MomentModule,ng2Ckeditor.CKEditorModule,ngxImageCropper.ImageCropperModule],schemas:[i0.CUSTOM_ELEMENTS_SCHEMA],exports:[ListingComponent,ShowformComponent],providers:[ApiService],entryComponents:[Confirmdialog,BottomSheet,VideoPlayer,ImageView,SnackbarComponent]}]}],Pi);function Pi(){}exports.ListingService=ListingService,exports.ListingComponent=ListingComponent,exports.Confirmdialog=Confirmdialog,exports.BottomSheet=BottomSheet,exports.VideoPlayer=VideoPlayer,exports.ImageView=ImageView,exports.SnackbarComponent=SnackbarComponent,exports.ShowformComponent=ShowformComponent,exports.ListingModule=ListingModule,exports.ɵa=ApiService,exports.ɵc=DemoMaterialModule,exports.ɵb=YoutubeplayerComponent,Object.defineProperty(exports,"__esModule",{value:!0})});
//# sourceMappingURL=listing-angular7.umd.min.js.map